"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CypressTestOpsReporter = void 0;
const testops_commons_1 = require("@katalon/testops-commons");
const uuid_1 = require("uuid");
class CypressTestOpsReporter {
    constructor(config) {
        this.report = new testops_commons_1.ReportLifecycle(config);
    }
    createTestResult(test) {
        const result = {};
        result.name = test.title.join('.');
        result.uuid = uuid_1.v4();
        const attempts = test.attempts[0];
        result.duration = attempts.duration;
        try {
            let startTime = new Date(attempts.startedAt);
            result.start = startTime.getTime();
            result.stop = result.start + attempts.duration;
        }
        catch (ignore) {
            // Ignore errors with start, end
        }
        if (test.state === 'passed') {
            result.status = testops_commons_1.Status.PASSED;
            return result;
        }
        if (test.state === 'failed') {
            result.status = testops_commons_1.Status.FAILED;
            const { error } = attempts;
            const testError = {};
            testError.message = error.message;
            testError.stackTrace = error.stack;
            result.errors = result.errors || [];
            result.errors.push(testError);
            return result;
        }
        result.status = testops_commons_1.Status.SKIPPED;
        return result;
    }
    createTestSuite(suiteInfo) {
        const suiteId = uuid_1.v4();
        const suite = {};
        suite.uuid = suiteId;
        let start = new Date(suiteInfo.startedAt);
        let stop = new Date(suiteInfo.endedAt);
        suite.start = start.getTime();
        suite.stop = stop.getTime();
        suite.duration = suiteInfo.duration;
        return suite;
    }
    parseAndUploadTestResults(results) {
        if (!results)
            return;
        try {
            const execution = this.onExecutionStart(results);
            const runs = results.runs;
            runs.forEach((run) => {
                const suite = this.createTestSuite(run.stats);
                const suiteName = run.spec.name;
                suite.name = suiteName;
                suite.parentUuid = execution.uuid;
                run.tests.forEach((test) => {
                    const result = this.createTestResult(test);
                    result.suiteName = suiteName;
                    this.report.stopTestCase(result);
                });
                this.report.stopTestSuite(suite);
            });
            this.onExecutionFinish(execution);
        }
        catch (err) {
            console.error(err);
        }
    }
    createMetadata() {
        const metadata = {
            framework: "cypress",
            language: "javascript"
        };
        return metadata;
    }
    createExecution(results) {
        const execution = {};
        execution.uuid = uuid_1.v4();
        let start = new Date(results.startedTestsAt);
        let stop = new Date(results.endedTestsAt);
        execution.start = start.getTime();
        execution.stop = stop.getTime();
        execution.duration = results.totalDuration;
        if (results.totalFailed > 0) {
            execution.status = testops_commons_1.Status.FAILED;
            return execution;
        }
        execution.status = testops_commons_1.Status.PASSED;
        return execution;
    }
    onExecutionStart(results) {
        const metadata = this.createMetadata();
        this.report.writeMetadata(metadata);
        return this.createExecution(results);
    }
    onExecutionFinish(execution) {
        this.report.stopExecution(execution);
        this.report.writeTestResultsReport();
        this.report.writeTestSuitesReport();
        this.report.writeExecutionReport();
        this.report.upload();
    }
}
exports.CypressTestOpsReporter = CypressTestOpsReporter;
//# sourceMappingURL=CypressTestOpsReporter.js.map