"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReportUploader = void 0;
var axios_1 = require("axios");
var testops_api_1 = require("@katalon/testops-api");
var fs_1 = require("fs");
var path = require("path");
var uuid_1 = require("uuid");
var ReportUploader = /** @class */ (function () {
    function ReportUploader(testOpsConfig) {
        if (typeof testOpsConfig.apiKey === "string") {
            testOpsConfig.username = "";
            testOpsConfig.password = testOpsConfig.apiKey;
        }
        testOpsConfig.baseOptions.maxBodyLength = Infinity;
        testOpsConfig.baseOptions.maxContentLength = Infinity;
        this.testOpsConfig = testOpsConfig;
        this.axiosInstance = axios_1.default.create(this.testOpsConfig.baseOptions);
    }
    ReportUploader.prototype.generateUploadBatchId = function () {
        return new Date().getTime() + "-" + uuid_1.v4();
    };
    ReportUploader.prototype.uploadFile = function (uploadFile, file) {
        return __awaiter(this, void 0, void 0, function () {
            var axiosInstance, _a, uploadUrl, fileStream;
            return __generator(this, function (_b) {
                axiosInstance = this.axiosInstance;
                _a = uploadFile.uploadUrl, uploadUrl = _a === void 0 ? "" : _a;
                fileStream = fs_1.readFileSync(file);
                axiosInstance.put(uploadUrl, fileStream, {
                    headers: {
                        "content-type": "application/octet-stream",
                    },
                });
                return [2 /*return*/];
            });
        });
    };
    ReportUploader.prototype.uploadReport = function () {
        return __awaiter(this, void 0, void 0, function () {
            var config, testReportApi, fileApi, _a, apiKey, projectId, reportFolder, files, uploadInfos, batch, uploadFilesPromise, uploadFiles, uploadBatch;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        config = new testops_api_1.Configuration(this.testOpsConfig);
                        testReportApi = new testops_api_1.TestReportApi(config);
                        fileApi = new testops_api_1.FileApi(config);
                        _a = this.testOpsConfig, apiKey = _a.apiKey, projectId = _a.projectId, reportFolder = _a.reportFolder;
                        if (!apiKey) {
                            console.log("\n" +
                                " ------------------------------------------------------------------------------------------------- \n" +
                                "|                                                                                                 |\n" +
                                "|     WARNING: Missing Katalon TestOps API Key. Reports will not be uploaded.                     |\n" +
                                "|     https://docs.katalon.com/katalon-analytics/docs/ka-api-key.html#katalon-api-keys-usage      |\n" +
                                "|                                                                                                 |\n" +
                                " ------------------------------------------------------------------------------------------------- \n");
                            return [2 /*return*/];
                        }
                        if (!projectId) {
                            console.log("\n" +
                                " --------------------------------------------------------------------------------------- \n" +
                                "|                                                                                       |\n" +
                                "|     WARNING: Missing Katalon TestOps Project ID. Reports will not be uploaded.        |\n" +
                                "|                                                                                       |\n" +
                                " --------------------------------------------------------------------------------------- \n");
                            return [2 /*return*/];
                        }
                        if (!reportFolder) {
                            console.log("\n" +
                                " --------------------------------------------------- \n" +
                                "|                                                   |\n" +
                                "|     WARNING: Missing report folder config.        |\n" +
                                "|                                                   |\n" +
                                " --------------------------------------------------- \n");
                            return [2 /*return*/];
                        }
                        if (!fs_1.existsSync(reportFolder)) {
                            console.log("Report folder is not exist: " + reportFolder);
                            return [2 /*return*/];
                        }
                        console.log("Start uploading report");
                        files = fs_1.readdirSync(reportFolder);
                        return [4 /*yield*/, fileApi.getUploadUrls(projectId, files.length)];
                    case 1:
                        uploadInfos = (_b.sent()).data;
                        batch = this.generateUploadBatchId();
                        uploadFilesPromise = uploadInfos.map(function (uploadInfo, index) { return __awaiter(_this, void 0, void 0, function () {
                            var file, filePath;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        file = files[index];
                                        filePath = path.resolve(reportFolder, file);
                                        return [4 /*yield*/, this.uploadFile(uploadInfo, filePath)];
                                    case 1:
                                        _a.sent();
                                        console.log("Finish uploading file: " + filePath);
                                        return [2 /*return*/, {
                                                folderPath: reportFolder,
                                                fileName: file,
                                                uploadedPath: uploadInfo.path,
                                                end: index === uploadInfos.length - 1,
                                            }];
                                }
                            });
                        }); });
                        return [4 /*yield*/, Promise.all(uploadFilesPromise)];
                    case 2:
                        uploadFiles = _b.sent();
                        return [4 /*yield*/, testReportApi.processTestOpsReports(projectId, batch, uploadFiles)];
                    case 3:
                        uploadBatch = (_b.sent()).data;
                        console.log("Finish uploading report");
                        console.log("Test Run URL: ", uploadBatch.webUrl);
                        return [2 /*return*/];
                }
            });
        });
    };
    return ReportUploader;
}());
exports.ReportUploader = ReportUploader;
