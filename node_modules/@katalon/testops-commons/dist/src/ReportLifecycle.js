"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReportLifecycle = void 0;
var utils_1 = require("./utils");
var model_1 = require("./model");
var ReportStorage_1 = require("./ReportStorage");
var ReportUploader_1 = require("./ReportUploader");
var TestOpsReportGenerator_1 = require("./TestOpsReportGenerator");
var TestOpsConfigurationBuilder_1 = require("./TestOpsConfigurationBuilder");
var ReportLifecycle = /** @class */ (function () {
    function ReportLifecycle(testOpsConfig) {
        var _a;
        this.currentExecutionUuid = "";
        this.results = [];
        this.suites = [];
        var configuration = TestOpsConfigurationBuilder_1.TestOpsConfigurationBuilder.build(testOpsConfig);
        console.log("---------------  TestOps Configuration  --------------------");
        console.log("Server URL: " + configuration.basePath);
        console.log("API key: " + !!configuration.apiKey);
        console.log("Project ID: " + configuration.projectId);
        console.log("Report folder: " + configuration.reportFolder);
        if ((_a = configuration === null || configuration === void 0 ? void 0 : configuration.baseOptions) === null || _a === void 0 ? void 0 : _a.proxy) {
            var proxy = configuration.baseOptions.proxy;
            console.log("Proxy protocol: " + proxy.protocol);
            console.log("Proxy host: " + proxy.host);
            console.log("Proxy port: " + proxy.port);
            if (proxy.auth) {
                console.log("Proxy username: " + proxy.auth.username);
                console.log("Proxy password: " + !!proxy.auth.password);
            }
        }
        console.log("---------------  TestOps Configuration  --------------------");
        this.reportStorage = new ReportStorage_1.ReportStorage();
        this.reportGenerator = new TestOpsReportGenerator_1.TestOpsReportGenerator(configuration);
        this.reportUploader = new ReportUploader_1.ReportUploader(configuration);
        this.configuration = configuration;
    }
    ReportLifecycle.prototype.startExecution = function (execution) {
        this.start(execution);
        this.currentExecutionUuid = execution.uuid;
        return this.reportStorage.put(execution.uuid, execution);
    };
    ReportLifecycle.prototype.startSuite = function (testSuite) {
        var execution = this.getCurrentExecution();
        if (execution) {
            testSuite.parentUuid = execution.uuid;
        }
        this.start(testSuite);
        return this.reportStorage.put(testSuite.uuid, testSuite);
    };
    ReportLifecycle.prototype.startTestCase = function (test) {
        this.start(test);
        return this.reportStorage.put(test.uuid, test);
    };
    ReportLifecycle.prototype.stopTestCase = function (result) {
        var uuid = result.uuid;
        var storedTestResult = this.reportStorage.get(uuid);
        if (storedTestResult) {
            storedTestResult.stop = utils_1.now();
            storedTestResult.duration =
                storedTestResult.stop - storedTestResult.start;
            utils_1.copyProperties(result, storedTestResult);
        }
        this.reportStorage.put(uuid, result);
        this.results.push(result);
    };
    ReportLifecycle.prototype.stopTestSuite = function (testSuite) {
        var uuid = testSuite.uuid;
        var storedTestSuite = this.reportStorage.get(uuid);
        if (storedTestSuite) {
            storedTestSuite.stop = utils_1.now();
            storedTestSuite.duration = storedTestSuite.stop - storedTestSuite.start;
            utils_1.copyProperties(testSuite, storedTestSuite);
        }
        this.reportStorage.put(uuid, testSuite);
        this.suites.push(testSuite);
    };
    ReportLifecycle.prototype.stopExecution = function (execution) {
        var storedExecution = this.getCurrentExecution();
        if (storedExecution) {
            storedExecution.stop = utils_1.now();
            storedExecution.duration = storedExecution.stop - storedExecution.start;
            storedExecution.status = this.getExecutionStatusFromTestResults(this.results);
            utils_1.copyProperties(execution, storedExecution);
        }
        this.reportStorage.put(this.currentExecutionUuid, execution);
    };
    ReportLifecycle.prototype.writeExecutionReport = function () {
        var execution = this.getCurrentExecution();
        if (execution) {
            this.reportGenerator.writeExecution(execution);
        }
        this.clearExecution();
    };
    ReportLifecycle.prototype.writeTestSuitesReport = function () {
        var testSuites = this.createTestSuites(this.suites);
        this.reportGenerator.writeTestSuites(testSuites);
        this.clearSuites();
    };
    ReportLifecycle.prototype.writeTestResultsReport = function () {
        var testResults = this.createTestResults(this.results);
        this.reportGenerator.writeTestResults(testResults);
        this.clearTestResults();
    };
    ReportLifecycle.prototype.writeMetadata = function (metadata) {
        var _a;
        var configMetadata = ((_a = this.configuration) === null || _a === void 0 ? void 0 : _a.metadata) || {};
        utils_1.copyProperties(metadata, configMetadata);
        this.reportGenerator.writeMetaData(metadata);
    };
    ReportLifecycle.prototype.upload = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.reportUploader.uploadReport().catch(function (error) {
                        console.error(error);
                    })];
            });
        });
    };
    ReportLifecycle.prototype.start = function (executable) {
        executable.start = executable.start || utils_1.now();
    };
    ReportLifecycle.prototype.createTestResults = function (results) {
        var testResults = {};
        testResults.results = results;
        return testResults;
    };
    ReportLifecycle.prototype.createTestSuites = function (suites) {
        var testSuites = {};
        testSuites.suites = suites;
        return testSuites;
    };
    ReportLifecycle.prototype.clearExecution = function () {
        this.reportStorage.remove(this.currentExecutionUuid);
        this.currentExecutionUuid = "";
    };
    ReportLifecycle.prototype.clearSuites = function () {
        var _this = this;
        this.suites.forEach(function (suite) {
            var uuid = suite.uuid;
            _this.reportStorage.remove(uuid);
        });
        this.suites = [];
    };
    ReportLifecycle.prototype.clearTestResults = function () {
        var _this = this;
        this.results.forEach(function (result) {
            var uuid = result.uuid;
            _this.reportStorage.remove(uuid);
        });
        this.results = [];
    };
    ReportLifecycle.prototype.getExecutionStatusFromTestResults = function (results) {
        var _this = this;
        var failed = results.find(function (result) {
            var status = result.status;
            return _this.isFailed(status);
        });
        if (failed) {
            return model_1.Status.FAILED;
        }
        else {
            return model_1.Status.PASSED;
        }
    };
    ReportLifecycle.prototype.getCurrentExecution = function () {
        var _a = this, reportStorage = _a.reportStorage, currentExecutionUuid = _a.currentExecutionUuid;
        var execution = reportStorage.get(currentExecutionUuid);
        return execution;
    };
    ReportLifecycle.prototype.isFailed = function (status) {
        if (status == model_1.Status.FAILED) {
            return true;
        }
        if (status == model_1.Status.ERROR) {
            return true;
        }
        if (status == model_1.Status.INCOMPLETE) {
            return true;
        }
        return false;
    };
    return ReportLifecycle;
}());
exports.ReportLifecycle = ReportLifecycle;
