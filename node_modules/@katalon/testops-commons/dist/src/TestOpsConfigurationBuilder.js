"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestOpsConfigurationBuilder = void 0;
var fs_1 = require("fs");
var configuration = {
    baseOptions: {},
    metadata: {},
};
// Load from testops-config.json file
if (fs_1.existsSync("testops-config.json")) {
    console.log("Load configuration from testops-config.json file.");
    var configString = fs_1.readFileSync("testops-config.json", { encoding: "utf8", flag: "r" });
    var config = JSON.parse(configString);
    configuration.basePath = config.basePath;
    configuration.apiKey = config.apiKey;
    configuration.projectId = config.projectId;
    configuration.reportFolder = config.reportFolder;
    configuration.baseOptions.proxy = config.proxy;
}
else {
    console.log("Couldn't find testops-config.json file.");
}
// Load from environment variable
console.log("Load configuration from environment variables.");
if (process.env.TESTOPS_SERVER_URL) {
    configuration.basePath = process.env.TESTOPS_SERVER_URL;
}
if (process.env.TESTOPS_API_KEY) {
    configuration.apiKey = process.env.TESTOPS_API_KEY;
}
if (process.env.TESTOPS_PROJECT_ID) {
    configuration.projectId = parseInt(process.env.TESTOPS_PROJECT_ID);
}
if (process.env.TESTOPS_REPORT_FOLDER) {
    configuration.reportFolder = process.env.TESTOPS_REPORT_FOLDER;
}
// proxy configuration
if (process.env.TESTOPS_PROXY_SERVER_TYPE) {
    configuration.baseOptions.proxy = configuration.baseOptions.proxy || {};
    configuration.baseOptions.proxy.protocol = process.env.TESTOPS_PROXY_SERVER_TYPE;
}
if (process.env.TESTOPS_PROXY_HOST) {
    configuration.baseOptions.proxy = configuration.baseOptions.proxy || {};
    configuration.baseOptions.proxy.host = process.env.TESTOPS_PROXY_HOST;
}
if (process.env.TESTOPS_PROXY_PORT) {
    configuration.baseOptions.proxy = configuration.baseOptions.proxy || {};
    configuration.baseOptions.proxy.port = process.env.TESTOPS_PROXY_PORT;
}
if (process.env.TESTOPS_PROXY_USERNAME) {
    configuration.baseOptions.proxy = configuration.baseOptions.proxy || {};
    configuration.baseOptions.proxy.auth = configuration.baseOptions.proxy.auth || {};
    configuration.baseOptions.proxy.auth.username = process.env.TESTOPS_PROXY_USERNAME;
}
if (process.env.TESTOPS_PROXY_PASSWORD) {
    configuration.baseOptions.proxy = configuration.baseOptions.proxy || {};
    configuration.baseOptions.proxy.auth = configuration.baseOptions.proxy.auth || {};
    configuration.baseOptions.proxy.auth.password = process.env.TESTOPS_PROXY_PASSWORD;
}
// metadata configuration
configuration.metadata = configuration.metadata || {};
if (process.env.TESTOPS_SESSION_ID) {
    configuration.metadata.sessionId = process.env.TESTOPS_SESSION_ID;
}
if (process.env.TESTOPS_BUILD_LABEL) {
    configuration.metadata.buildLabel = process.env.TESTOPS_BUILD_LABEL;
}
if (process.env.TESTOPS_BUILD_URL) {
    configuration.metadata.buildUrl = process.env.TESTOPS_BUILD_URL;
}
console.log("Load configuration: DONE");
var TestOpsConfigurationBuilder = /** @class */ (function () {
    function TestOpsConfigurationBuilder() {
    }
    TestOpsConfigurationBuilder.build = function (toConfig) {
        var config = {
            basePath: configuration.basePath || (toConfig === null || toConfig === void 0 ? void 0 : toConfig.basePath) || "https://testops.katalon.io",
            apiKey: configuration.apiKey || (toConfig === null || toConfig === void 0 ? void 0 : toConfig.apiKey),
            projectId: configuration.projectId || (toConfig === null || toConfig === void 0 ? void 0 : toConfig.projectId),
            reportFolder: configuration.reportFolder || (toConfig === null || toConfig === void 0 ? void 0 : toConfig.reportFolder) || "testops-report",
            baseOptions: __assign(__assign({}, toConfig === null || toConfig === void 0 ? void 0 : toConfig.baseOptions), configuration.baseOptions),
            metadata: __assign(__assign({}, toConfig === null || toConfig === void 0 ? void 0 : toConfig.metadata), configuration.metadata)
        };
        if (config.reportFolder && config.metadata) {
            config.metadata.reportFolder = config.reportFolder;
        }
        var basePath = config.basePath;
        if (basePath && basePath.trim().endsWith("/")) {
            config.basePath = basePath.trim().slice(0, -1);
        }
        return config;
    };
    return TestOpsConfigurationBuilder;
}());
exports.TestOpsConfigurationBuilder = TestOpsConfigurationBuilder;
