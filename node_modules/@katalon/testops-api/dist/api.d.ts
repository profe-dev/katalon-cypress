/**
 * Katalon TestOps API reference
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface AgentConfigResource
 */
export interface AgentConfigResource {
    /**
     *
     * @type {string}
     * @memberof AgentConfigResource
     */
    teamId?: string;
    /**
     *
     * @type {string}
     * @memberof AgentConfigResource
     */
    agentName?: string;
    /**
     *
     * @type {string}
     * @memberof AgentConfigResource
     */
    apiKey?: string;
    /**
     *
     * @type {string}
     * @memberof AgentConfigResource
     */
    os?: string;
    /**
     *
     * @type {string}
     * @memberof AgentConfigResource
     */
    email?: string;
}
/**
 *
 * @export
 * @interface AgentResource
 */
export interface AgentResource {
    /**
     *
     * @type {number}
     * @memberof AgentResource
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof AgentResource
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof AgentResource
     */
    ip?: string;
    /**
     *
     * @type {string}
     * @memberof AgentResource
     */
    uuid?: string;
    /**
     *
     * @type {string}
     * @memberof AgentResource
     */
    lastPing?: string;
    /**
     *
     * @type {string}
     * @memberof AgentResource
     */
    os?: string;
    /**
     *
     * @type {number}
     * @memberof AgentResource
     */
    teamId?: number;
    /**
     *
     * @type {string}
     * @memberof AgentResource
     */
    hostname?: string;
    /**
     *
     * @type {boolean}
     * @memberof AgentResource
     */
    active?: boolean;
    /**
     *
     * @type {number}
     * @memberof AgentResource
     */
    threshold?: number;
    /**
     *
     * @type {number}
     * @memberof AgentResource
     */
    numExecutingJobs?: number;
    /**
     *
     * @type {number}
     * @memberof AgentResource
     */
    numAssignedJobs?: number;
    /**
     *
     * @type {string}
     * @memberof AgentResource
     */
    agentVersion?: string;
    /**
     *
     * @type {boolean}
     * @memberof AgentResource
     */
    deleted?: boolean;
}
/**
 *
 * @export
 * @interface BuildInfo
 */
export interface BuildInfo {
    /**
     *
     * @type {number}
     * @memberof BuildInfo
     */
    build_num?: number;
    /**
     *
     * @type {number}
     * @memberof BuildInfo
     */
    job_id?: number;
    /**
     *
     * @type {number}
     * @memberof BuildInfo
     */
    build_time_millis?: number;
    /**
     *
     * @type {string}
     * @memberof BuildInfo
     */
    status?: string;
    /**
     *
     * @type {string}
     * @memberof BuildInfo
     */
    usage_queued_at?: string;
    /**
     *
     * @type {string}
     * @memberof BuildInfo
     */
    start_time?: string;
    /**
     *
     * @type {string}
     * @memberof BuildInfo
     */
    stop_time?: string;
    /**
     *
     * @type {Array<BuildLog>}
     * @memberof BuildInfo
     */
    steps?: Array<BuildLog>;
}
/**
 *
 * @export
 * @interface BuildLog
 */
export interface BuildLog {
    /**
     *
     * @type {string}
     * @memberof BuildLog
     */
    logFileUrl?: string;
    /**
     *
     * @type {string}
     * @memberof BuildLog
     */
    content?: string;
    /**
     *
     * @type {string}
     * @memberof BuildLog
     */
    name?: string;
    /**
     *
     * @type {Array<{ [key: string]: string; }>}
     * @memberof BuildLog
     */
    actions?: Array<{
        [key: string]: string;
    }>;
}
/**
 *
 * @export
 * @interface CircleCIAgentResource
 */
export interface CircleCIAgentResource {
    /**
     *
     * @type {number}
     * @memberof CircleCIAgentResource
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof CircleCIAgentResource
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof CircleCIAgentResource
     */
    url?: string;
    /**
     *
     * @type {string}
     * @memberof CircleCIAgentResource
     */
    username?: string;
    /**
     *
     * @type {string}
     * @memberof CircleCIAgentResource
     */
    token?: string;
    /**
     *
     * @type {string}
     * @memberof CircleCIAgentResource
     */
    project?: string;
    /**
     *
     * @type {string}
     * @memberof CircleCIAgentResource
     */
    vcsType?: string;
    /**
     *
     * @type {string}
     * @memberof CircleCIAgentResource
     */
    branch?: string;
    /**
     *
     * @type {number}
     * @memberof CircleCIAgentResource
     */
    teamId?: number;
    /**
     *
     * @type {string}
     * @memberof CircleCIAgentResource
     */
    apiKey?: string;
}
/**
 *
 * @export
 * @interface CircleCIConnectionResource
 */
export interface CircleCIConnectionResource {
    /**
     *
     * @type {string}
     * @memberof CircleCIConnectionResource
     */
    url?: string;
    /**
     *
     * @type {string}
     * @memberof CircleCIConnectionResource
     */
    username?: string;
    /**
     *
     * @type {string}
     * @memberof CircleCIConnectionResource
     */
    token?: string;
    /**
     *
     * @type {string}
     * @memberof CircleCIConnectionResource
     */
    project?: string;
    /**
     *
     * @type {string}
     * @memberof CircleCIConnectionResource
     */
    vcsType?: string;
    /**
     *
     * @type {string}
     * @memberof CircleCIConnectionResource
     */
    branch?: string;
}
/**
 *
 * @export
 * @interface CircleCIProject
 */
export interface CircleCIProject {
    /**
     *
     * @type {string}
     * @memberof CircleCIProject
     */
    username?: string;
    /**
     *
     * @type {{ [key: string]: object; }}
     * @memberof CircleCIProject
     */
    branches?: {
        [key: string]: object;
    };
    /**
     *
     * @type {string}
     * @memberof CircleCIProject
     */
    reponame?: string;
    /**
     *
     * @type {string}
     * @memberof CircleCIProject
     */
    vcs_url?: string;
    /**
     *
     * @type {string}
     * @memberof CircleCIProject
     */
    vcs_type?: string;
}
/**
 *
 * @export
 * @interface CommentResource
 */
export interface CommentResource {
    /**
     *
     * @type {number}
     * @memberof CommentResource
     */
    id?: number;
    /**
     *
     * @type {number}
     * @memberof CommentResource
     */
    objectId?: number;
    /**
     *
     * @type {number}
     * @memberof CommentResource
     */
    projectId?: number;
    /**
     *
     * @type {string}
     * @memberof CommentResource
     */
    content?: string;
    /**
     *
     * @type {string}
     * @memberof CommentResource
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof CommentResource
     */
    updatedAt?: string;
    /**
     *
     * @type {number}
     * @memberof CommentResource
     */
    teamId?: number;
    /**
     *
     * @type {string}
     * @memberof CommentResource
     */
    objectType?: CommentResourceObjectTypeEnum;
    /**
     *
     * @type {string}
     * @memberof CommentResource
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof CommentResource
     */
    displayName?: string;
    /**
     *
     * @type {string}
     * @memberof CommentResource
     */
    displayAvatar?: string;
    /**
     *
     * @type {boolean}
     * @memberof CommentResource
     */
    bySystem?: boolean;
}
/**
    * @export
    * @enum {string}
    */
export declare enum CommentResourceObjectTypeEnum {
    ExecutionTestSuite = "EXECUTION_TEST_SUITE",
    ExecutionTestResult = "EXECUTION_TEST_RESULT",
    TestCase = "TEST_CASE",
    Incident = "INCIDENT",
    KeyesExecution = "KEYES_EXECUTION"
}
/**
 *
 * @export
 * @interface ConfigResource
 */
export interface ConfigResource {
    /**
     *
     * @type {string}
     * @memberof ConfigResource
     */
    webSocketUrl?: string;
    /**
     *
     * @type {string}
     * @memberof ConfigResource
     */
    storeUrl?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof ConfigResource
     */
    profiles?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof ConfigResource
     */
    stripePublicApi?: string;
    /**
     *
     * @type {string}
     * @memberof ConfigResource
     */
    buildVersion?: string;
    /**
     *
     * @type {string}
     * @memberof ConfigResource
     */
    commitId?: string;
    /**
     *
     * @type {string}
     * @memberof ConfigResource
     */
    sentryDsn?: string;
    /**
     *
     * @type {string}
     * @memberof ConfigResource
     */
    sentryEnv?: string;
    /**
     *
     * @type {string}
     * @memberof ConfigResource
     */
    serverUrl?: string;
    /**
     *
     * @type {string}
     * @memberof ConfigResource
     */
    ioServerUrl?: string;
    /**
     *
     * @type {number}
     * @memberof ConfigResource
     */
    maxExecutionComparison?: number;
    /**
     *
     * @type {number}
     * @memberof ConfigResource
     */
    maxExecutionDownload?: number;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof ConfigResource
     */
    agentDownloadUrls?: {
        [key: string]: string;
    };
    /**
     *
     * @type {string}
     * @memberof ConfigResource
     */
    reportUploaderDownloadUrl?: string;
    /**
     *
     * @type {string}
     * @memberof ConfigResource
     */
    reportUploaderLatestVersion?: string;
    /**
     *
     * @type {string}
     * @memberof ConfigResource
     */
    subDomainPattern?: string;
    /**
     *
     * @type {string}
     * @memberof ConfigResource
     */
    cancellationSurveyUrl?: string;
    /**
     *
     * @type {boolean}
     * @memberof ConfigResource
     */
    advancedFeatureEnabled?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ConfigResource
     */
    usingSubDomain?: boolean;
}
/**
 *
 * @export
 * @interface EnvironmentVariable
 */
export interface EnvironmentVariable {
    /**
     *
     * @type {string}
     * @memberof EnvironmentVariable
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof EnvironmentVariable
     */
    value?: string;
}
/**
 *
 * @export
 * @interface ExecutionRequestResource
 */
export interface ExecutionRequestResource {
    /**
     *
     * @type {number}
     * @memberof ExecutionRequestResource
     */
    id?: number;
    /**
     *
     * @type {ExecutionTestResultResource}
     * @memberof ExecutionRequestResource
     */
    executionTestResult?: ExecutionTestResultResource;
    /**
     *
     * @type {TestObjectResource}
     * @memberof ExecutionRequestResource
     */
    object?: TestObjectResource;
    /**
     *
     * @type {number}
     * @memberof ExecutionRequestResource
     */
    status?: number;
    /**
     *
     * @type {boolean}
     * @memberof ExecutionRequestResource
     */
    abnormal?: boolean;
    /**
     *
     * @type {number}
     * @memberof ExecutionRequestResource
     */
    percentAbnormal?: number;
    /**
     *
     * @type {string}
     * @memberof ExecutionRequestResource
     */
    url?: string;
    /**
     *
     * @type {string}
     * @memberof ExecutionRequestResource
     */
    method?: string;
    /**
     *
     * @type {string}
     * @memberof ExecutionRequestResource
     */
    statusText?: string;
    /**
     *
     * @type {number}
     * @memberof ExecutionRequestResource
     */
    time?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionRequestResource
     */
    size?: number;
    /**
     *
     * @type {UploadFileResource}
     * @memberof ExecutionRequestResource
     */
    uploadFile?: UploadFileResource;
    /**
     *
     * @type {string}
     * @memberof ExecutionRequestResource
     */
    startedAt?: string;
}
/**
 *
 * @export
 * @interface ExecutionResource
 */
export interface ExecutionResource {
    /**
     *
     * @type {string}
     * @memberof ExecutionResource
     */
    status?: ExecutionResourceStatusEnum;
    /**
     *
     * @type {string}
     * @memberof ExecutionResource
     */
    startTime?: string;
    /**
     *
     * @type {string}
     * @memberof ExecutionResource
     */
    endTime?: string;
    /**
     *
     * @type {number}
     * @memberof ExecutionResource
     */
    duration?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionResource
     */
    elapsedDuration?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionResource
     */
    totalTests?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionResource
     */
    totalPassedTests?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionResource
     */
    totalFailedTests?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionResource
     */
    totalErrorTests?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionResource
     */
    totalIncompleteTests?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionResource
     */
    totalDiffTests?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionResource
     */
    totalDiffPassedTests?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionResource
     */
    totalDiffFailedTests?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionResource
     */
    totalDiffErrorTests?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionResource
     */
    totalDiffIncompleteTests?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionResource
     */
    id?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionResource
     */
    projectId?: number;
    /**
     *
     * @type {ProjectResource}
     * @memberof ExecutionResource
     */
    project?: ProjectResource;
    /**
     *
     * @type {number}
     * @memberof ExecutionResource
     */
    buildId?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionResource
     */
    order?: number;
    /**
     *
     * @type {string}
     * @memberof ExecutionResource
     */
    executionStage?: ExecutionResourceExecutionStageEnum;
    /**
     *
     * @type {string}
     * @memberof ExecutionResource
     */
    webUrl?: string;
    /**
     *
     * @type {Array<TestSuiteCollectionEntityResource>}
     * @memberof ExecutionResource
     */
    testSuiteCollections?: Array<TestSuiteCollectionEntityResource>;
    /**
     *
     * @type {Array<ExecutionTestSuiteResource>}
     * @memberof ExecutionResource
     */
    executionTestSuiteResources?: Array<ExecutionTestSuiteResource>;
    /**
     *
     * @type {ReleaseResource}
     * @memberof ExecutionResource
     */
    release?: ReleaseResource;
    /**
     *
     * @type {boolean}
     * @memberof ExecutionResource
     */
    hasComment?: boolean;
    /**
     *
     * @type {UserResource}
     * @memberof ExecutionResource
     */
    user?: UserResource;
    /**
     *
     * @type {string}
     * @memberof ExecutionResource
     */
    sessionId?: string;
    /**
     *
     * @type {string}
     * @memberof ExecutionResource
     */
    buildLabel?: string;
    /**
     *
     * @type {string}
     * @memberof ExecutionResource
     */
    buildUrl?: string;
    /**
     *
     * @type {string}
     * @memberof ExecutionResource
     */
    type?: ExecutionResourceTypeEnum;
    /**
     *
     * @type {Array<JobResource>}
     * @memberof ExecutionResource
     */
    jobs?: Array<JobResource>;
}
/**
    * @export
    * @enum {string}
    */
export declare enum ExecutionResourceStatusEnum {
    Passed = "PASSED",
    Failed = "FAILED",
    Error = "ERROR",
    Incomplete = "INCOMPLETE",
    Running = "RUNNING",
    Skipped = "SKIPPED",
    NotRun = "NOT_RUN"
}
/**
    * @export
    * @enum {string}
    */
export declare enum ExecutionResourceExecutionStageEnum {
    Running = "RUNNING",
    Completed = "COMPLETED",
    Terminate = "TERMINATE",
    Analyzing = "ANALYZING",
    Analyzed = "ANALYZED",
    Importing = "IMPORTING",
    Error = "ERROR"
}
/**
    * @export
    * @enum {string}
    */
export declare enum ExecutionResourceTypeEnum {
    Katalon = "KATALON",
    Bdd = "BDD"
}
/**
 *
 * @export
 * @interface ExecutionShareReportResource
 */
export interface ExecutionShareReportResource {
    /**
     *
     * @type {Array<string>}
     * @memberof ExecutionShareReportResource
     */
    emails?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof ExecutionShareReportResource
     */
    executionId?: number;
}
/**
 *
 * @export
 * @interface ExecutionTestCaseResource
 */
export interface ExecutionTestCaseResource {
    /**
     *
     * @type {string}
     * @memberof ExecutionTestCaseResource
     */
    status?: ExecutionTestCaseResourceStatusEnum;
    /**
     *
     * @type {string}
     * @memberof ExecutionTestCaseResource
     */
    startTime?: string;
    /**
     *
     * @type {string}
     * @memberof ExecutionTestCaseResource
     */
    endTime?: string;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestCaseResource
     */
    duration?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestCaseResource
     */
    elapsedDuration?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestCaseResource
     */
    totalTests?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestCaseResource
     */
    totalPassedTests?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestCaseResource
     */
    totalFailedTests?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestCaseResource
     */
    totalErrorTests?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestCaseResource
     */
    totalIncompleteTests?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestCaseResource
     */
    totalDiffTests?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestCaseResource
     */
    totalDiffPassedTests?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestCaseResource
     */
    totalDiffFailedTests?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestCaseResource
     */
    totalDiffErrorTests?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestCaseResource
     */
    totalDiffIncompleteTests?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestCaseResource
     */
    executionId?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestCaseResource
     */
    executionOrder?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestCaseResource
     */
    testCaseId?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestCaseResource
     */
    projectId?: number;
}
/**
    * @export
    * @enum {string}
    */
export declare enum ExecutionTestCaseResourceStatusEnum {
    Passed = "PASSED",
    Failed = "FAILED",
    Error = "ERROR",
    Incomplete = "INCOMPLETE",
    Running = "RUNNING",
    Skipped = "SKIPPED",
    NotRun = "NOT_RUN"
}
/**
 *
 * @export
 * @interface ExecutionTestResultIdentifyResource
 */
export interface ExecutionTestResultIdentifyResource {
    /**
     *
     * @type {number}
     * @memberof ExecutionTestResultIdentifyResource
     */
    id?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestResultIdentifyResource
     */
    executionId?: number;
    /**
     *
     * @type {string}
     * @memberof ExecutionTestResultIdentifyResource
     */
    urlId?: string;
}
/**
 *
 * @export
 * @interface ExecutionTestResultResource
 */
export interface ExecutionTestResultResource {
    /**
     *
     * @type {number}
     * @memberof ExecutionTestResultResource
     */
    id?: number;
    /**
     *
     * @type {TestCaseResource}
     * @memberof ExecutionTestResultResource
     */
    testCase?: TestCaseResource;
    /**
     *
     * @type {ExecutionResource}
     * @memberof ExecutionTestResultResource
     */
    execution?: ExecutionResource;
    /**
     *
     * @type {PlatformResource}
     * @memberof ExecutionTestResultResource
     */
    platform?: PlatformResource;
    /**
     *
     * @type {string}
     * @memberof ExecutionTestResultResource
     */
    status?: ExecutionTestResultResourceStatusEnum;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestResultResource
     */
    sameStatusPeriod?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestResultResource
     */
    errorDetailsId?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestResultResource
     */
    stdoutId?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestResultResource
     */
    descriptionId?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestResultResource
     */
    logId?: number;
    /**
     *
     * @type {Array<FileResource>}
     * @memberof ExecutionTestResultResource
     */
    attachments?: Array<FileResource>;
    /**
     *
     * @type {Array<TestResultAssertionFailedResource>}
     * @memberof ExecutionTestResultResource
     */
    testResultAssertionsFailed?: Array<TestResultAssertionFailedResource>;
    /**
     *
     * @type {string}
     * @memberof ExecutionTestResultResource
     */
    startTime?: string;
    /**
     *
     * @type {string}
     * @memberof ExecutionTestResultResource
     */
    endTime?: string;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestResultResource
     */
    duration?: number;
    /**
     *
     * @type {Array<ExecutionTestResultIdentifyResource>}
     * @memberof ExecutionTestResultResource
     */
    sameFailureResults?: Array<ExecutionTestResultIdentifyResource>;
    /**
     *
     * @type {TestSuiteResource}
     * @memberof ExecutionTestResultResource
     */
    testSuite?: TestSuiteResource;
    /**
     *
     * @type {ExecutionTestSuiteResource}
     * @memberof ExecutionTestResultResource
     */
    executionTestSuite?: ExecutionTestSuiteResource;
    /**
     *
     * @type {Array<IncidentResource>}
     * @memberof ExecutionTestResultResource
     */
    incidents?: Array<IncidentResource>;
    /**
     *
     * @type {string}
     * @memberof ExecutionTestResultResource
     */
    profile?: string;
    /**
     *
     * @type {boolean}
     * @memberof ExecutionTestResultResource
     */
    hasComment?: boolean;
    /**
     *
     * @type {string}
     * @memberof ExecutionTestResultResource
     */
    errorMessage?: string;
    /**
     *
     * @type {string}
     * @memberof ExecutionTestResultResource
     */
    errorDetail?: string;
    /**
     *
     * @type {string}
     * @memberof ExecutionTestResultResource
     */
    webUrl?: string;
    /**
     *
     * @type {Array<ExternalIssueResource>}
     * @memberof ExecutionTestResultResource
     */
    externalIssues?: Array<ExternalIssueResource>;
    /**
     *
     * @type {string}
     * @memberof ExecutionTestResultResource
     */
    failedTestResultCategory?: ExecutionTestResultResourceFailedTestResultCategoryEnum;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestResultResource
     */
    totalTestObject?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestResultResource
     */
    totalDefects?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestResultResource
     */
    totalAssertion?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestResultResource
     */
    passedAssertion?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestResultResource
     */
    failedAssertion?: number;
    /**
     *
     * @type {string}
     * @memberof ExecutionTestResultResource
     */
    urlId?: string;
}
/**
    * @export
    * @enum {string}
    */
export declare enum ExecutionTestResultResourceStatusEnum {
    Passed = "PASSED",
    Failed = "FAILED",
    Error = "ERROR",
    Incomplete = "INCOMPLETE",
    Running = "RUNNING",
    Skipped = "SKIPPED",
    NotRun = "NOT_RUN"
}
/**
    * @export
    * @enum {string}
    */
export declare enum ExecutionTestResultResourceFailedTestResultCategoryEnum {
    Application = "APPLICATION",
    Automation = "AUTOMATION",
    Environment = "ENVIRONMENT",
    Unknown = "UNKNOWN"
}
/**
 *
 * @export
 * @interface ExecutionTestSuiteResource
 */
export interface ExecutionTestSuiteResource {
    /**
     *
     * @type {string}
     * @memberof ExecutionTestSuiteResource
     */
    status?: ExecutionTestSuiteResourceStatusEnum;
    /**
     *
     * @type {string}
     * @memberof ExecutionTestSuiteResource
     */
    startTime?: string;
    /**
     *
     * @type {string}
     * @memberof ExecutionTestSuiteResource
     */
    endTime?: string;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestSuiteResource
     */
    duration?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestSuiteResource
     */
    elapsedDuration?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestSuiteResource
     */
    totalTests?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestSuiteResource
     */
    totalPassedTests?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestSuiteResource
     */
    totalFailedTests?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestSuiteResource
     */
    totalErrorTests?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestSuiteResource
     */
    totalIncompleteTests?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestSuiteResource
     */
    totalDiffTests?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestSuiteResource
     */
    totalDiffPassedTests?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestSuiteResource
     */
    totalDiffFailedTests?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestSuiteResource
     */
    totalDiffErrorTests?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestSuiteResource
     */
    totalDiffIncompleteTests?: number;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestSuiteResource
     */
    id?: number;
    /**
     *
     * @type {ExecutionResource}
     * @memberof ExecutionTestSuiteResource
     */
    execution?: ExecutionResource;
    /**
     *
     * @type {TestSuiteResource}
     * @memberof ExecutionTestSuiteResource
     */
    testSuite?: TestSuiteResource;
    /**
     *
     * @type {PlatformResource}
     * @memberof ExecutionTestSuiteResource
     */
    platform?: PlatformResource;
    /**
     *
     * @type {number}
     * @memberof ExecutionTestSuiteResource
     */
    executionId?: number;
    /**
     *
     * @type {Array<string>}
     * @memberof ExecutionTestSuiteResource
     */
    profiles?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof ExecutionTestSuiteResource
     */
    hasComment?: boolean;
    /**
     *
     * @type {string}
     * @memberof ExecutionTestSuiteResource
     */
    urlId?: string;
}
/**
    * @export
    * @enum {string}
    */
export declare enum ExecutionTestSuiteResourceStatusEnum {
    Passed = "PASSED",
    Failed = "FAILED",
    Error = "ERROR",
    Incomplete = "INCOMPLETE",
    Running = "RUNNING",
    Skipped = "SKIPPED",
    NotRun = "NOT_RUN"
}
/**
 *
 * @export
 * @interface ExternalIssueResource
 */
export interface ExternalIssueResource {
    /**
     *
     * @type {number}
     * @memberof ExternalIssueResource
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof ExternalIssueResource
     */
    issueId?: string;
    /**
     *
     * @type {string}
     * @memberof ExternalIssueResource
     */
    summary?: string;
    /**
     *
     * @type {string}
     * @memberof ExternalIssueResource
     */
    status?: string;
    /**
     *
     * @type {string}
     * @memberof ExternalIssueResource
     */
    issueTypeIcon?: string;
    /**
     *
     * @type {string}
     * @memberof ExternalIssueResource
     */
    issueTypeName?: string;
    /**
     *
     * @type {string}
     * @memberof ExternalIssueResource
     */
    url?: string;
    /**
     *
     * @type {string}
     * @memberof ExternalIssueResource
     */
    featureName?: string;
    /**
     *
     * @type {Array<TestCaseResource>}
     * @memberof ExternalIssueResource
     */
    testCases?: Array<TestCaseResource>;
    /**
     *
     * @type {Array<ExecutionTestResultResource>}
     * @memberof ExternalIssueResource
     */
    testResults?: Array<ExecutionTestResultResource>;
}
/**
 *
 * @export
 * @interface ExternalProjectResource
 */
export interface ExternalProjectResource {
    /**
     *
     * @type {number}
     * @memberof ExternalProjectResource
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof ExternalProjectResource
     */
    externalProjectId?: string;
    /**
     *
     * @type {string}
     * @memberof ExternalProjectResource
     */
    externalProjectKey?: string;
    /**
     *
     * @type {string}
     * @memberof ExternalProjectResource
     */
    name?: string;
}
/**
 *
 * @export
 * @interface ExternalReleaseResource
 */
export interface ExternalReleaseResource {
    /**
     *
     * @type {number}
     * @memberof ExternalReleaseResource
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof ExternalReleaseResource
     */
    releaseId?: string;
    /**
     *
     * @type {string}
     * @memberof ExternalReleaseResource
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof ExternalReleaseResource
     */
    name?: string;
    /**
     *
     * @type {boolean}
     * @memberof ExternalReleaseResource
     */
    archived?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ExternalReleaseResource
     */
    released?: boolean;
    /**
     *
     * @type {ExternalProjectResource}
     * @memberof ExternalReleaseResource
     */
    externalProject?: ExternalProjectResource;
    /**
     *
     * @type {string}
     * @memberof ExternalReleaseResource
     */
    webUrl?: string;
}
/**
 *
 * @export
 * @interface FileResource
 */
export interface FileResource {
    /**
     *
     * @type {number}
     * @memberof FileResource
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof FileResource
     */
    self?: string;
    /**
     *
     * @type {string}
     * @memberof FileResource
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof FileResource
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof FileResource
     */
    url?: string;
    /**
     *
     * @type {string}
     * @memberof FileResource
     */
    hash?: string;
    /**
     *
     * @type {number}
     * @memberof FileResource
     */
    size?: number;
    /**
     *
     * @type {string}
     * @memberof FileResource
     */
    uploadUrl?: string;
    /**
     *
     * @type {string}
     * @memberof FileResource
     */
    signedUrl?: string;
}
/**
 *
 * @export
 * @interface GitRepositoryResource
 */
export interface GitRepositoryResource {
    /**
     *
     * @type {number}
     * @memberof GitRepositoryResource
     */
    id?: number;
    /**
     *
     * @type {number}
     * @memberof GitRepositoryResource
     */
    testProjectId?: number;
    /**
     *
     * @type {string}
     * @memberof GitRepositoryResource
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof GitRepositoryResource
     */
    repository?: string;
    /**
     *
     * @type {string}
     * @memberof GitRepositoryResource
     */
    branch?: string;
    /**
     *
     * @type {string}
     * @memberof GitRepositoryResource
     */
    username?: string;
    /**
     *
     * @type {string}
     * @memberof GitRepositoryResource
     */
    password?: string;
    /**
     *
     * @type {number}
     * @memberof GitRepositoryResource
     */
    projectId?: number;
    /**
     *
     * @type {number}
     * @memberof GitRepositoryResource
     */
    teamId?: number;
    /**
     *
     * @type {string}
     * @memberof GitRepositoryResource
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof GitRepositoryResource
     */
    updatedAt?: string;
    /**
     *
     * @type {string}
     * @memberof GitRepositoryResource
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof GitRepositoryResource
     */
    vcsType?: GitRepositoryResourceVcsTypeEnum;
}
/**
    * @export
    * @enum {string}
    */
export declare enum GitRepositoryResourceVcsTypeEnum {
    Github = "GITHUB",
    Gitlab = "GITLAB",
    Bitbucket = "BITBUCKET",
    Others = "OTHERS"
}
/**
 *
 * @export
 * @interface IncidentExecutionTestResultResource
 */
export interface IncidentExecutionTestResultResource {
    /**
     *
     * @type {number}
     * @memberof IncidentExecutionTestResultResource
     */
    id?: number;
    /**
     *
     * @type {number}
     * @memberof IncidentExecutionTestResultResource
     */
    incidentId?: number;
    /**
     *
     * @type {number}
     * @memberof IncidentExecutionTestResultResource
     */
    projectId?: number;
    /**
     *
     * @type {number}
     * @memberof IncidentExecutionTestResultResource
     */
    incidentOrder?: number;
    /**
     *
     * @type {number}
     * @memberof IncidentExecutionTestResultResource
     */
    executionTestResultId?: number;
}
/**
 *
 * @export
 * @interface IncidentResource
 */
export interface IncidentResource {
    /**
     *
     * @type {number}
     * @memberof IncidentResource
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof IncidentResource
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof IncidentResource
     */
    description?: string;
    /**
     *
     * @type {number}
     * @memberof IncidentResource
     */
    projectId?: number;
    /**
     *
     * @type {number}
     * @memberof IncidentResource
     */
    teamId?: number;
    /**
     *
     * @type {Array<string>}
     * @memberof IncidentResource
     */
    urlIds?: Array<string>;
    /**
     *
     * @type {Array<number>}
     * @memberof IncidentResource
     */
    executionTestResultIds?: Array<number>;
    /**
     *
     * @type {number}
     * @memberof IncidentResource
     */
    order?: number;
    /**
     *
     * @type {string}
     * @memberof IncidentResource
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof IncidentResource
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @interface JobResource
 */
export interface JobResource {
    /**
     *
     * @type {number}
     * @memberof JobResource
     */
    id?: number;
    /**
     *
     * @type {number}
     * @memberof JobResource
     */
    buildNumber?: number;
    /**
     *
     * @type {string}
     * @memberof JobResource
     */
    status?: JobResourceStatusEnum;
    /**
     *
     * @type {string}
     * @memberof JobResource
     */
    queuedAt?: string;
    /**
     *
     * @type {string}
     * @memberof JobResource
     */
    startTime?: string;
    /**
     *
     * @type {string}
     * @memberof JobResource
     */
    stopTime?: string;
    /**
     *
     * @type {TestProjectResource}
     * @memberof JobResource
     */
    testProject?: TestProjectResource;
    /**
     *
     * @type {ExecutionResource}
     * @memberof JobResource
     */
    execution?: ExecutionResource;
    /**
     *
     * @type {AgentResource}
     * @memberof JobResource
     */
    agent?: AgentResource;
    /**
     *
     * @type {K8SAgentResource}
     * @memberof JobResource
     */
    k8sAgent?: K8SAgentResource;
    /**
     *
     * @type {CircleCIAgentResource}
     * @memberof JobResource
     */
    circleCiAgent?: CircleCIAgentResource;
    /**
     *
     * @type {RunConfigurationResource}
     * @memberof JobResource
     */
    runConfiguration?: RunConfigurationResource;
    /**
     *
     * @type {number}
     * @memberof JobResource
     */
    order?: number;
    /**
     *
     * @type {TriggerBuildParameter}
     * @memberof JobResource
     */
    parameter?: TriggerBuildParameter;
    /**
     *
     * @type {string}
     * @memberof JobResource
     */
    triggerBy?: JobResourceTriggerByEnum;
    /**
     *
     * @type {number}
     * @memberof JobResource
     */
    duration?: number;
    /**
     *
     * @type {string}
     * @memberof JobResource
     */
    triggerAt?: string;
    /**
     *
     * @type {UserResource}
     * @memberof JobResource
     */
    user?: UserResource;
    /**
     *
     * @type {SchedulerResource}
     * @memberof JobResource
     */
    scheduler?: SchedulerResource;
    /**
     *
     * @type {ProjectResource}
     * @memberof JobResource
     */
    project?: ProjectResource;
    /**
     *
     * @type {number}
     * @memberof JobResource
     */
    processId?: number;
    /**
     *
     * @type {string}
     * @memberof JobResource
     */
    nodeStatus?: JobResourceNodeStatusEnum;
    /**
     *
     * @type {number}
     * @memberof JobResource
     */
    runConfigurationId?: number;
}
/**
    * @export
    * @enum {string}
    */
export declare enum JobResourceStatusEnum {
    Queued = "QUEUED",
    Running = "RUNNING",
    Failed = "FAILED",
    Success = "SUCCESS",
    Canceled = "CANCELED",
    Error = "ERROR",
    WaitForTrigger = "WAIT_FOR_TRIGGER"
}
/**
    * @export
    * @enum {string}
    */
export declare enum JobResourceTriggerByEnum {
    Manual = "MANUAL",
    Schedule = "SCHEDULE"
}
/**
    * @export
    * @enum {string}
    */
export declare enum JobResourceNodeStatusEnum {
    PendingCanceled = "PENDING_CANCELED",
    Canceled = "CANCELED"
}
/**
 *
 * @export
 * @interface K8SAgentResource
 */
export interface K8SAgentResource {
    /**
     *
     * @type {number}
     * @memberof K8SAgentResource
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof K8SAgentResource
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof K8SAgentResource
     */
    certificateAuthority?: string;
    /**
     *
     * @type {string}
     * @memberof K8SAgentResource
     */
    url?: string;
    /**
     *
     * @type {string}
     * @memberof K8SAgentResource
     */
    namespace?: string;
    /**
     *
     * @type {string}
     * @memberof K8SAgentResource
     */
    username?: string;
    /**
     *
     * @type {string}
     * @memberof K8SAgentResource
     */
    password?: string;
    /**
     *
     * @type {string}
     * @memberof K8SAgentResource
     */
    token?: string;
    /**
     *
     * @type {string}
     * @memberof K8SAgentResource
     */
    cluster?: string;
    /**
     *
     * @type {string}
     * @memberof K8SAgentResource
     */
    region?: string;
    /**
     *
     * @type {string}
     * @memberof K8SAgentResource
     */
    accessKey?: string;
    /**
     *
     * @type {string}
     * @memberof K8SAgentResource
     */
    privateAccessKey?: string;
    /**
     *
     * @type {number}
     * @memberof K8SAgentResource
     */
    teamId?: number;
    /**
     *
     * @type {string}
     * @memberof K8SAgentResource
     */
    apiKey?: string;
    /**
     *
     * @type {string}
     * @memberof K8SAgentResource
     */
    authenticationType?: K8SAgentResourceAuthenticationTypeEnum;
}
/**
    * @export
    * @enum {string}
    */
export declare enum K8SAgentResourceAuthenticationTypeEnum {
    BasicAuth = "BASIC_AUTH",
    BearerToken = "BEARER_TOKEN",
    EksAuth = "EKS_AUTH"
}
/**
 *
 * @export
 * @interface LocalTime
 */
export interface LocalTime {
    /**
     *
     * @type {number}
     * @memberof LocalTime
     */
    hour?: number;
    /**
     *
     * @type {number}
     * @memberof LocalTime
     */
    minute?: number;
    /**
     *
     * @type {number}
     * @memberof LocalTime
     */
    second?: number;
    /**
     *
     * @type {number}
     * @memberof LocalTime
     */
    nano?: number;
}
/**
 *
 * @export
 * @interface OrganizationFeatureFlagResource
 */
export interface OrganizationFeatureFlagResource {
    /**
     *
     * @type {number}
     * @memberof OrganizationFeatureFlagResource
     */
    organizationId?: number;
    /**
     *
     * @type {boolean}
     * @memberof OrganizationFeatureFlagResource
     */
    subDomain?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof OrganizationFeatureFlagResource
     */
    strictDomain?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof OrganizationFeatureFlagResource
     */
    sso?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof OrganizationFeatureFlagResource
     * @deprecated
     */
    circleCi?: boolean;
}
/**
 *
 * @export
 * @interface OrganizationResource
 */
export interface OrganizationResource {
    /**
     *
     * @type {number}
     * @memberof OrganizationResource
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof OrganizationResource
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationResource
     */
    role?: OrganizationResourceRoleEnum;
    /**
     *
     * @type {OrganizationFeatureFlagResource}
     * @memberof OrganizationResource
     */
    orgFeatureFlag?: OrganizationFeatureFlagResource;
    /**
     *
     * @type {number}
     * @memberof OrganizationResource
     */
    quotaKSE?: number;
    /**
     *
     * @type {number}
     * @memberof OrganizationResource
     */
    machineQuotaKSE?: number;
    /**
     *
     * @type {number}
     * @memberof OrganizationResource
     */
    quotaEngine?: number;
    /**
     *
     * @type {number}
     * @memberof OrganizationResource
     */
    machineQuotaEngine?: number;
    /**
     *
     * @type {number}
     * @memberof OrganizationResource
     */
    usedKSE?: number;
    /**
     *
     * @type {number}
     * @memberof OrganizationResource
     */
    usedEngine?: number;
    /**
     *
     * @type {number}
     * @memberof OrganizationResource
     */
    quotaTestOps?: number;
    /**
     *
     * @type {number}
     * @memberof OrganizationResource
     */
    usedTestOps?: number;
    /**
     *
     * @type {number}
     * @memberof OrganizationResource
     */
    numberUser?: number;
    /**
     *
     * @type {number}
     * @memberof OrganizationResource
     */
    quotaFloatingEngine?: number;
    /**
     *
     * @type {number}
     * @memberof OrganizationResource
     */
    usedFloatingEngine?: number;
    /**
     *
     * @type {boolean}
     * @memberof OrganizationResource
     */
    canCreateOfflineKSE?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof OrganizationResource
     */
    canCreateOfflineRE?: boolean;
    /**
     *
     * @type {string}
     * @memberof OrganizationResource
     */
    subscriptionExpiryDateEngine?: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationResource
     */
    subscriptionExpiryDateKSE?: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationResource
     */
    subscriptionExpiryDateFloatingEngine?: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationResource
     */
    subscriptionExpiryDateTestOps?: string;
    /**
     *
     * @type {boolean}
     * @memberof OrganizationResource
     */
    subscribed?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof OrganizationResource
     */
    ksePaygo?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof OrganizationResource
     */
    krePaygo?: boolean;
    /**
     *
     * @type {number}
     * @memberof OrganizationResource
     */
    paygoQuota?: number;
    /**
     *
     * @type {string}
     * @memberof OrganizationResource
     */
    domain?: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationResource
     */
    subdomainUrl?: string;
    /**
     *
     * @type {boolean}
     * @memberof OrganizationResource
     */
    strictDomain?: boolean;
    /**
     *
     * @type {string}
     * @memberof OrganizationResource
     */
    logoUrl?: string;
    /**
     *
     * @type {boolean}
     * @memberof OrganizationResource
     */
    samlSSO?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof OrganizationResource
     */
    kreLicense?: boolean;
    /**
     *
     * @type {string}
     * @memberof OrganizationResource
     */
    testOpsPackage?: OrganizationResourceTestOpsPackageEnum;
    /**
     *
     * @type {string}
     * @memberof OrganizationResource
     */
    mostRecentProjectAccessedAt?: string;
}
/**
    * @export
    * @enum {string}
    */
export declare enum OrganizationResourceRoleEnum {
    Owner = "OWNER",
    Admin = "ADMIN",
    User = "USER",
    BillingManager = "BILLING_MANAGER"
}
/**
    * @export
    * @enum {string}
    */
export declare enum OrganizationResourceTestOpsPackageEnum {
    Basic = "BASIC",
    Advanced = "ADVANCED",
    Enterprise = "ENTERPRISE"
}
/**
 *
 * @export
 * @interface OrganizationTrialRequestResource
 */
export interface OrganizationTrialRequestResource {
    /**
     *
     * @type {OrganizationResource}
     * @memberof OrganizationTrialRequestResource
     */
    organization?: OrganizationResource;
    /**
     *
     * @type {UserResource}
     * @memberof OrganizationTrialRequestResource
     */
    userRequest?: UserResource;
    /**
     *
     * @type {string}
     * @memberof OrganizationTrialRequestResource
     */
    status?: OrganizationTrialRequestResourceStatusEnum;
    /**
     *
     * @type {string}
     * @memberof OrganizationTrialRequestResource
     */
    updatedAt?: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationTrialRequestResource
     */
    formRequest?: string;
}
/**
    * @export
    * @enum {string}
    */
export declare enum OrganizationTrialRequestResourceStatusEnum {
    Pending = "PENDING",
    Approved = "APPROVED",
    Rejected = "REJECTED"
}
/**
 *
 * @export
 * @interface PageBaseResource
 */
export interface PageBaseResource {
    /**
     *
     * @type {number}
     * @memberof PageBaseResource
     */
    totalElements?: number;
    /**
     *
     * @type {number}
     * @memberof PageBaseResource
     */
    totalPages?: number;
    /**
     *
     * @type {number}
     * @memberof PageBaseResource
     */
    size?: number;
    /**
     *
     * @type {Array<object>}
     * @memberof PageBaseResource
     */
    content?: Array<object>;
    /**
     *
     * @type {number}
     * @memberof PageBaseResource
     */
    number?: number;
    /**
     *
     * @type {Sort}
     * @memberof PageBaseResource
     */
    sort?: Sort;
    /**
     *
     * @type {number}
     * @memberof PageBaseResource
     */
    numberOfElements?: number;
    /**
     *
     * @type {boolean}
     * @memberof PageBaseResource
     */
    first?: boolean;
    /**
     *
     * @type {Pageable}
     * @memberof PageBaseResource
     */
    pageable?: Pageable;
    /**
     *
     * @type {boolean}
     * @memberof PageBaseResource
     */
    last?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PageBaseResource
     */
    empty?: boolean;
}
/**
 *
 * @export
 * @interface PageExecutionResource
 */
export interface PageExecutionResource {
    /**
     *
     * @type {number}
     * @memberof PageExecutionResource
     */
    totalElements?: number;
    /**
     *
     * @type {number}
     * @memberof PageExecutionResource
     */
    totalPages?: number;
    /**
     *
     * @type {number}
     * @memberof PageExecutionResource
     */
    size?: number;
    /**
     *
     * @type {Array<ExecutionResource>}
     * @memberof PageExecutionResource
     */
    content?: Array<ExecutionResource>;
    /**
     *
     * @type {number}
     * @memberof PageExecutionResource
     */
    number?: number;
    /**
     *
     * @type {Sort}
     * @memberof PageExecutionResource
     */
    sort?: Sort;
    /**
     *
     * @type {number}
     * @memberof PageExecutionResource
     */
    numberOfElements?: number;
    /**
     *
     * @type {boolean}
     * @memberof PageExecutionResource
     */
    first?: boolean;
    /**
     *
     * @type {Pageable}
     * @memberof PageExecutionResource
     */
    pageable?: Pageable;
    /**
     *
     * @type {boolean}
     * @memberof PageExecutionResource
     */
    last?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PageExecutionResource
     */
    empty?: boolean;
}
/**
 *
 * @export
 * @interface PageJobResource
 */
export interface PageJobResource {
    /**
     *
     * @type {number}
     * @memberof PageJobResource
     */
    totalElements?: number;
    /**
     *
     * @type {number}
     * @memberof PageJobResource
     */
    totalPages?: number;
    /**
     *
     * @type {number}
     * @memberof PageJobResource
     */
    size?: number;
    /**
     *
     * @type {Array<JobResource>}
     * @memberof PageJobResource
     */
    content?: Array<JobResource>;
    /**
     *
     * @type {number}
     * @memberof PageJobResource
     */
    number?: number;
    /**
     *
     * @type {Sort}
     * @memberof PageJobResource
     */
    sort?: Sort;
    /**
     *
     * @type {number}
     * @memberof PageJobResource
     */
    numberOfElements?: number;
    /**
     *
     * @type {boolean}
     * @memberof PageJobResource
     */
    first?: boolean;
    /**
     *
     * @type {Pageable}
     * @memberof PageJobResource
     */
    pageable?: Pageable;
    /**
     *
     * @type {boolean}
     * @memberof PageJobResource
     */
    last?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PageJobResource
     */
    empty?: boolean;
}
/**
 *
 * @export
 * @interface PageProjectResource
 */
export interface PageProjectResource {
    /**
     *
     * @type {number}
     * @memberof PageProjectResource
     */
    totalElements?: number;
    /**
     *
     * @type {number}
     * @memberof PageProjectResource
     */
    totalPages?: number;
    /**
     *
     * @type {number}
     * @memberof PageProjectResource
     */
    size?: number;
    /**
     *
     * @type {Array<ProjectResource>}
     * @memberof PageProjectResource
     */
    content?: Array<ProjectResource>;
    /**
     *
     * @type {number}
     * @memberof PageProjectResource
     */
    number?: number;
    /**
     *
     * @type {Sort}
     * @memberof PageProjectResource
     */
    sort?: Sort;
    /**
     *
     * @type {number}
     * @memberof PageProjectResource
     */
    numberOfElements?: number;
    /**
     *
     * @type {boolean}
     * @memberof PageProjectResource
     */
    first?: boolean;
    /**
     *
     * @type {Pageable}
     * @memberof PageProjectResource
     */
    pageable?: Pageable;
    /**
     *
     * @type {boolean}
     * @memberof PageProjectResource
     */
    last?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PageProjectResource
     */
    empty?: boolean;
}
/**
 *
 * @export
 * @interface PageTeamResource
 */
export interface PageTeamResource {
    /**
     *
     * @type {number}
     * @memberof PageTeamResource
     */
    totalElements?: number;
    /**
     *
     * @type {number}
     * @memberof PageTeamResource
     */
    totalPages?: number;
    /**
     *
     * @type {number}
     * @memberof PageTeamResource
     */
    size?: number;
    /**
     *
     * @type {Array<TeamResource>}
     * @memberof PageTeamResource
     */
    content?: Array<TeamResource>;
    /**
     *
     * @type {number}
     * @memberof PageTeamResource
     */
    number?: number;
    /**
     *
     * @type {Sort}
     * @memberof PageTeamResource
     */
    sort?: Sort;
    /**
     *
     * @type {number}
     * @memberof PageTeamResource
     */
    numberOfElements?: number;
    /**
     *
     * @type {boolean}
     * @memberof PageTeamResource
     */
    first?: boolean;
    /**
     *
     * @type {Pageable}
     * @memberof PageTeamResource
     */
    pageable?: Pageable;
    /**
     *
     * @type {boolean}
     * @memberof PageTeamResource
     */
    last?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PageTeamResource
     */
    empty?: boolean;
}
/**
 *
 * @export
 * @interface Pageable
 */
export interface Pageable {
    /**
     *
     * @type {number}
     * @memberof Pageable
     */
    offset?: number;
    /**
     *
     * @type {Sort}
     * @memberof Pageable
     */
    sort?: Sort;
    /**
     *
     * @type {number}
     * @memberof Pageable
     */
    pageNumber?: number;
    /**
     *
     * @type {number}
     * @memberof Pageable
     */
    pageSize?: number;
    /**
     *
     * @type {boolean}
     * @memberof Pageable
     */
    paged?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Pageable
     */
    unpaged?: boolean;
}
/**
 *
 * @export
 * @interface PlatformResource
 */
export interface PlatformResource {
    /**
     *
     * @type {number}
     * @memberof PlatformResource
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof PlatformResource
     */
    osName?: string;
    /**
     *
     * @type {string}
     * @memberof PlatformResource
     */
    osVersion?: string;
    /**
     *
     * @type {string}
     * @memberof PlatformResource
     */
    browserName?: string;
    /**
     *
     * @type {string}
     * @memberof PlatformResource
     */
    browserVersion?: string;
}
/**
 *
 * @export
 * @interface ProjectConfigurationResource
 */
export interface ProjectConfigurationResource {
    /**
     *
     * @type {string}
     * @memberof ProjectConfigurationResource
     */
    name?: ProjectConfigurationResourceNameEnum;
    /**
     *
     * @type {string}
     * @memberof ProjectConfigurationResource
     */
    value?: string;
}
/**
    * @export
    * @enum {string}
    */
export declare enum ProjectConfigurationResourceNameEnum {
    Timezone = "TIMEZONE",
    AssertionPattern = "ASSERTION_PATTERN"
}
/**
 *
 * @export
 * @interface ProjectResource
 */
export interface ProjectResource {
    /**
     *
     * @type {number}
     * @memberof ProjectResource
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof ProjectResource
     */
    name?: string;
    /**
     *
     * @type {number}
     * @memberof ProjectResource
     */
    teamId?: number;
    /**
     *
     * @type {TeamResource}
     * @memberof ProjectResource
     */
    team?: TeamResource;
    /**
     *
     * @type {string}
     * @memberof ProjectResource
     */
    timezone?: string;
    /**
     *
     * @type {string}
     * @memberof ProjectResource
     */
    status?: ProjectResourceStatusEnum;
}
/**
    * @export
    * @enum {string}
    */
export declare enum ProjectResourceStatusEnum {
    Archive = "ARCHIVE",
    Active = "ACTIVE"
}
/**
 *
 * @export
 * @interface ProjectSettingResource
 */
export interface ProjectSettingResource {
    /**
     *
     * @type {number}
     * @memberof ProjectSettingResource
     */
    projectId?: number;
    /**
     *
     * @type {boolean}
     * @memberof ProjectSettingResource
     */
    bdd?: boolean;
}
/**
 *
 * @export
 * @interface ReleaseResource
 */
export interface ReleaseResource {
    /**
     *
     * @type {number}
     * @memberof ReleaseResource
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof ReleaseResource
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ReleaseResource
     */
    startTime?: string;
    /**
     *
     * @type {string}
     * @memberof ReleaseResource
     */
    endTime?: string;
    /**
     *
     * @type {string}
     * @memberof ReleaseResource
     */
    description?: string;
    /**
     *
     * @type {number}
     * @memberof ReleaseResource
     */
    projectId?: number;
    /**
     *
     * @type {boolean}
     * @memberof ReleaseResource
     */
    closed?: boolean;
    /**
     *
     * @type {ExternalReleaseResource}
     * @memberof ReleaseResource
     */
    externalRelease?: ExternalReleaseResource;
    /**
     *
     * @type {ReleaseStatisticsResource}
     * @memberof ReleaseResource
     */
    releaseStatistics?: ReleaseStatisticsResource;
}
/**
 *
 * @export
 * @interface ReleaseStatisticsResource
 */
export interface ReleaseStatisticsResource {
    /**
     *
     * @type {number}
     * @memberof ReleaseStatisticsResource
     */
    id?: number;
    /**
     *
     * @type {ReleaseResource}
     * @memberof ReleaseStatisticsResource
     */
    release?: ReleaseResource;
    /**
     *
     * @type {number}
     * @memberof ReleaseStatisticsResource
     */
    totalPassed?: number;
    /**
     *
     * @type {number}
     * @memberof ReleaseStatisticsResource
     */
    totalFailed?: number;
    /**
     *
     * @type {number}
     * @memberof ReleaseStatisticsResource
     */
    totalExecution?: number;
}
/**
 *
 * @export
 * @interface RunConfigurationResource
 */
export interface RunConfigurationResource {
    /**
     *
     * @type {number}
     * @memberof RunConfigurationResource
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof RunConfigurationResource
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof RunConfigurationResource
     */
    command?: string;
    /**
     *
     * @type {number}
     * @memberof RunConfigurationResource
     */
    projectId?: number;
    /**
     *
     * @type {number}
     * @memberof RunConfigurationResource
     */
    teamId?: number;
    /**
     *
     * @type {number}
     * @memberof RunConfigurationResource
     */
    testProjectId?: number;
    /**
     *
     * @type {number}
     * @memberof RunConfigurationResource
     */
    releaseId?: number;
    /**
     *
     * @type {number}
     * @memberof RunConfigurationResource
     */
    testSuiteCollectionId?: number;
    /**
     *
     * @type {number}
     * @memberof RunConfigurationResource
     */
    timeOut?: number;
    /**
     *
     * @type {string}
     * @memberof RunConfigurationResource
     */
    configType?: RunConfigurationResourceConfigTypeEnum;
    /**
     *
     * @type {TestProjectResource}
     * @memberof RunConfigurationResource
     */
    testProject?: TestProjectResource;
    /**
     *
     * @type {Array<AgentResource>}
     * @memberof RunConfigurationResource
     */
    agents?: Array<AgentResource>;
    /**
     *
     * @type {Array<K8SAgentResource>}
     * @memberof RunConfigurationResource
     */
    k8sAgents?: Array<K8SAgentResource>;
    /**
     *
     * @type {Array<CircleCIAgentResource>}
     * @memberof RunConfigurationResource
     */
    circleCIAgents?: Array<CircleCIAgentResource>;
    /**
     *
     * @type {string}
     * @memberof RunConfigurationResource
     */
    cloudType?: RunConfigurationResourceCloudTypeEnum;
    /**
     *
     * @type {JobResource}
     * @memberof RunConfigurationResource
     */
    latestJob?: JobResource;
    /**
     *
     * @type {string}
     * @memberof RunConfigurationResource
     */
    genericCommand?: string;
    /**
     *
     * @type {string}
     * @memberof RunConfigurationResource
     */
    ksVersion?: string;
    /**
     *
     * @type {string}
     * @memberof RunConfigurationResource
     */
    ksLocation?: string;
    /**
     *
     * @type {SchedulerResource}
     * @memberof RunConfigurationResource
     */
    nextRunScheduler?: SchedulerResource;
    /**
     *
     * @type {ReleaseResource}
     * @memberof RunConfigurationResource
     */
    release?: ReleaseResource;
}
/**
    * @export
    * @enum {string}
    */
export declare enum RunConfigurationResourceConfigTypeEnum {
    Tsc = "TSC",
    Command = "COMMAND",
    GenericCommand = "GENERIC_COMMAND"
}
/**
    * @export
    * @enum {string}
    */
export declare enum RunConfigurationResourceCloudTypeEnum {
    K8S = "K8S",
    LocalAgent = "LOCAL_AGENT",
    K8SAgent = "K8S_AGENT",
    CircleCiAgent = "CIRCLE_CI_AGENT"
}
/**
 *
 * @export
 * @interface SchedulerResource
 */
export interface SchedulerResource {
    /**
     *
     * @type {number}
     * @memberof SchedulerResource
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof SchedulerResource
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof SchedulerResource
     */
    startTime?: string;
    /**
     *
     * @type {string}
     * @memberof SchedulerResource
     */
    nextTime?: string;
    /**
     *
     * @type {string}
     * @memberof SchedulerResource
     */
    endTime?: string;
    /**
     *
     * @type {boolean}
     * @memberof SchedulerResource
     */
    active?: boolean;
    /**
     *
     * @type {number}
     * @memberof SchedulerResource
     */
    interval?: number;
    /**
     *
     * @type {string}
     * @memberof SchedulerResource
     */
    intervalUnit?: SchedulerResourceIntervalUnitEnum;
    /**
     *
     * @type {number}
     * @memberof SchedulerResource
     */
    runConfigurationId?: number;
    /**
     *
     * @type {RunConfigurationResource}
     * @memberof SchedulerResource
     */
    runConfiguration?: RunConfigurationResource;
}
/**
    * @export
    * @enum {string}
    */
export declare enum SchedulerResourceIntervalUnitEnum {
    Minute = "MINUTE",
    Hour = "HOUR",
    Day = "DAY",
    Week = "WEEK",
    Month = "MONTH"
}
/**
 *
 * @export
 * @interface SearchConfigResource
 */
export interface SearchConfigResource {
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof SearchConfigResource
     */
    filterConfig?: {
        [key: string]: string;
    };
    /**
     *
     * @type {Array<string>}
     * @memberof SearchConfigResource
     */
    sortDefault?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof SearchConfigResource
     */
    sortConfig?: Array<string>;
}
/**
 *
 * @export
 * @interface SearchRequest
 */
export interface SearchRequest {
    /**
     *
     * @type {Array<SearchRequestCondition>}
     * @memberof SearchRequest
     */
    searchRequestConditions?: Array<SearchRequestCondition>;
    /**
     *
     * @type {SearchRequestPagination}
     * @memberof SearchRequest
     */
    searchRequestPagination?: SearchRequestPagination;
    /**
     *
     * @type {Array<string>}
     * @memberof SearchRequest
     */
    searchRequestGroupBys?: Array<string>;
    /**
     *
     * @type {Array<SearchRequestFunction>}
     * @memberof SearchRequest
     */
    searchRequestFunctions?: Array<SearchRequestFunction>;
    /**
     *
     * @type {string}
     * @memberof SearchRequest
     */
    type?: string;
    /**
     *
     * @type {string}
     * @memberof SearchRequest
     */
    searchEntity?: SearchRequestSearchEntityEnum;
    /**
     *
     * @type {string}
     * @memberof SearchRequest
     */
    timeZone?: string;
}
/**
    * @export
    * @enum {string}
    */
export declare enum SearchRequestSearchEntityEnum {
    Execution = "Execution",
    ExecutionTestSuite = "ExecutionTestSuite",
    ExecutionStatistics = "ExecutionStatistics",
    ExecutionTestModule = "ExecutionTestModule",
    ExecutionTestResult = "ExecutionTestResult",
    ExecutionRequest = "ExecutionRequest",
    Incident = "Incident",
    TestCase = "TestCase",
    TestSuite = "TestSuite",
    ExecutionTestStep = "ExecutionTestStep",
    TestProject = "TestProject",
    Job = "Job",
    RunningTestRun = "RunningTestRun",
    Project = "Project",
    ApiKey = "ApiKey",
    Comment = "Comment",
    Team = "Team",
    Organization = "Organization",
    UserOrganization = "UserOrganization",
    UserTeam = "UserTeam",
    UserInvitation = "UserInvitation",
    UserSsoInvitation = "UserSsoInvitation",
    UserConfiguration = "UserConfiguration",
    Agent = "Agent",
    RunConfiguration = "RunConfiguration",
    Release = "Release",
    TestObject = "TestObject",
    TestObjectEntity = "TestObjectEntity",
    TestCaseExecution = "TestCaseExecution",
    TestCaseExecutionStatus = "TestCaseExecutionStatus",
    ReleaseStatisticsStatus = "ReleaseStatisticsStatus",
    TestCaseExecutionComparison = "TestCaseExecutionComparison",
    TestCaseExecutionComparisonStatistics = "TestCaseExecutionComparisonStatistics",
    TestCasePlatformStatistics = "TestCasePlatformStatistics",
    Scheduler = "Scheduler",
    ExecutionAnalysis = "ExecutionAnalysis",
    ExecutionTestResultCategory = "ExecutionTestResultCategory",
    ExecutionTestResultGroup = "ExecutionTestResultGroup",
    ExecutionTestResultTestObjectEntity = "ExecutionTestResultTestObjectEntity",
    ExecutionFile = "ExecutionFile",
    TestSuiteCollection = "TestSuiteCollection",
    TestSuiteCollectionEntity = "TestSuiteCollectionEntity",
    TestCasePriority = "TestCasePriority",
    ExternalConnection = "ExternalConnection",
    PlatformStatistics = "PlatformStatistics",
    TestProjectFile = "TestProjectFile",
    ProjectStatistics = "ProjectStatistics",
    ProjectRequirementStatistic = "ProjectRequirementStatistic",
    TestCaseRequirementStatistic = "TestCaseRequirementStatistic",
    UserOrganizationFeature = "UserOrganizationFeature",
    Machine = "Machine",
    LicenseKey = "LicenseKey",
    K8SAgent = "K8SAgent",
    CircleCiAgent = "CircleCiAgent",
    JobSummary = "JobSummary",
    KatalonRecorderBackup = "KatalonRecorderBackup",
    ExternalDefect = "ExternalDefect",
    ExternalRequirement = "ExternalRequirement",
    ExternalTraceability = "ExternalTraceability",
    RequirementTestRunCoverage = "RequirementTestRunCoverage",
    WhitelistIp = "WhitelistIp",
    KsSession = "KsSession",
    CiDashboardStatistics = "CiDashboardStatistics",
    Checkpoint = "Checkpoint",
    KeyesExecution = "KeyesExecution",
    RecentProject = "RecentProject",
    JiraIssue = "JiraIssue",
    SlackConnection = "SlackConnection",
    Baseline = "Baseline",
    BaselineCollection = "BaselineCollection",
    TestCaseFlakiness = "TestCaseFlakiness"
}
/**
 *
 * @export
 * @interface SearchRequestCondition
 */
export interface SearchRequestCondition {
    /**
     *
     * @type {string}
     * @memberof SearchRequestCondition
     */
    key?: string;
    /**
     *
     * @type {string}
     * @memberof SearchRequestCondition
     */
    operator?: string;
    /**
     *
     * @type {object}
     * @memberof SearchRequestCondition
     */
    value?: object;
}
/**
 *
 * @export
 * @interface SearchRequestFunction
 */
export interface SearchRequestFunction {
    /**
     *
     * @type {string}
     * @memberof SearchRequestFunction
     */
    key?: string;
    /**
     *
     * @type {string}
     * @memberof SearchRequestFunction
     */
    functionName?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof SearchRequestFunction
     */
    parameters?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof SearchRequestFunction
     */
    timeZone?: string;
}
/**
 *
 * @export
 * @interface SearchRequestPagination
 */
export interface SearchRequestPagination {
    /**
     *
     * @type {number}
     * @memberof SearchRequestPagination
     */
    page?: number;
    /**
     *
     * @type {number}
     * @memberof SearchRequestPagination
     */
    size?: number;
    /**
     *
     * @type {Array<SearchRequestSortOrder>}
     * @memberof SearchRequestPagination
     */
    sorts?: Array<SearchRequestSortOrder>;
}
/**
 *
 * @export
 * @interface SearchRequestSortOrder
 */
export interface SearchRequestSortOrder {
    /**
     *
     * @type {string}
     * @memberof SearchRequestSortOrder
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof SearchRequestSortOrder
     */
    order?: string;
}
/**
 *
 * @export
 * @interface Sort
 */
export interface Sort {
    /**
     *
     * @type {boolean}
     * @memberof Sort
     */
    sorted?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Sort
     */
    unsorted?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Sort
     */
    empty?: boolean;
}
/**
 *
 * @export
 * @interface TeamResource
 */
export interface TeamResource {
    /**
     *
     * @type {number}
     * @memberof TeamResource
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof TeamResource
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof TeamResource
     */
    role?: TeamResourceRoleEnum;
    /**
     *
     * @type {Array<UserResource>}
     * @memberof TeamResource
     */
    users?: Array<UserResource>;
    /**
     *
     * @type {OrganizationResource}
     * @memberof TeamResource
     */
    organization?: OrganizationResource;
    /**
     *
     * @type {number}
     * @memberof TeamResource
     */
    organizationId?: number;
}
/**
    * @export
    * @enum {string}
    */
export declare enum TeamResourceRoleEnum {
    Owner = "OWNER",
    Admin = "ADMIN",
    User = "USER"
}
/**
 *
 * @export
 * @interface TestCasePlatformStatisticsResource
 */
export interface TestCasePlatformStatisticsResource {
    /**
     *
     * @type {number}
     * @memberof TestCasePlatformStatisticsResource
     */
    totalTests?: number;
    /**
     *
     * @type {number}
     * @memberof TestCasePlatformStatisticsResource
     */
    totalPassedTests?: number;
    /**
     *
     * @type {number}
     * @memberof TestCasePlatformStatisticsResource
     */
    totalFailedTests?: number;
    /**
     *
     * @type {number}
     * @memberof TestCasePlatformStatisticsResource
     */
    totalErrorTests?: number;
    /**
     *
     * @type {number}
     * @memberof TestCasePlatformStatisticsResource
     */
    totalIncompleteTests?: number;
    /**
     *
     * @type {PlatformResource}
     * @memberof TestCasePlatformStatisticsResource
     */
    platform?: PlatformResource;
    /**
     *
     * @type {number}
     * @memberof TestCasePlatformStatisticsResource
     */
    platformId?: number;
}
/**
 *
 * @export
 * @interface TestCaseResource
 */
export interface TestCaseResource {
    /**
     *
     * @type {number}
     * @memberof TestCaseResource
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof TestCaseResource
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof TestCaseResource
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof TestCaseResource
     */
    previousStatus?: TestCaseResourcePreviousStatusEnum;
    /**
     *
     * @type {string}
     * @memberof TestCaseResource
     */
    alias?: string;
    /**
     *
     * @type {number}
     * @memberof TestCaseResource
     */
    testModuleId?: number;
    /**
     *
     * @type {string}
     * @memberof TestCaseResource
     */
    webUrl?: string;
    /**
     *
     * @type {string}
     * @memberof TestCaseResource
     */
    description?: string;
    /**
     *
     * @type {ProjectResource}
     * @memberof TestCaseResource
     */
    project?: ProjectResource;
    /**
     *
     * @type {ExecutionTestCaseResource}
     * @memberof TestCaseResource
     */
    lastExecutionTestCase?: ExecutionTestCaseResource;
    /**
     *
     * @type {Array<ExternalIssueResource>}
     * @memberof TestCaseResource
     */
    externalIssues?: Array<ExternalIssueResource>;
    /**
     *
     * @type {string}
     * @memberof TestCaseResource
     */
    type?: TestCaseResourceTypeEnum;
    /**
     *
     * @type {number}
     * @memberof TestCaseResource
     */
    averageDuration?: number;
    /**
     *
     * @type {number}
     * @memberof TestCaseResource
     */
    maxDuration?: number;
    /**
     *
     * @type {number}
     * @memberof TestCaseResource
     */
    minDuration?: number;
    /**
     *
     * @type {Array<ExecutionTestResultResource>}
     * @memberof TestCaseResource
     */
    executionTestResults?: Array<ExecutionTestResultResource>;
    /**
     *
     * @type {number}
     * @memberof TestCaseResource
     */
    flakiness?: number;
    /**
     *
     * @type {{ [key: string]: TestCasePlatformStatisticsResource; }}
     * @memberof TestCaseResource
     */
    platformStatistics?: {
        [key: string]: TestCasePlatformStatisticsResource;
    };
    /**
     *
     * @type {UserResource}
     * @memberof TestCaseResource
     */
    maintainer?: UserResource;
    /**
     *
     * @type {TestResultAssertionResource}
     * @memberof TestCaseResource
     */
    testResultAssertion?: TestResultAssertionResource;
    /**
     *
     * @type {string}
     * @memberof TestCaseResource
     */
    urlId?: string;
}
/**
    * @export
    * @enum {string}
    */
export declare enum TestCaseResourcePreviousStatusEnum {
    Passed = "PASSED",
    Failed = "FAILED",
    Error = "ERROR",
    Incomplete = "INCOMPLETE",
    Running = "RUNNING",
    Skipped = "SKIPPED",
    NotRun = "NOT_RUN"
}
/**
    * @export
    * @enum {string}
    */
export declare enum TestCaseResourceTypeEnum {
    TestCase = "TEST_CASE",
    Scenario = "SCENARIO"
}
/**
 *
 * @export
 * @interface TestObjectEntityResource
 */
export interface TestObjectEntityResource {
    /**
     *
     * @type {number}
     * @memberof TestObjectEntityResource
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof TestObjectEntityResource
     */
    name?: string;
    /**
     *
     * @type {ProjectResource}
     * @memberof TestObjectEntityResource
     */
    project?: ProjectResource;
}
/**
 *
 * @export
 * @interface TestObjectResource
 */
export interface TestObjectResource {
    /**
     *
     * @type {number}
     * @memberof TestObjectResource
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof TestObjectResource
     */
    name?: string;
    /**
     *
     * @type {number}
     * @memberof TestObjectResource
     */
    duration?: number;
    /**
     *
     * @type {number}
     * @memberof TestObjectResource
     */
    averageDuration?: number;
    /**
     *
     * @type {number}
     * @memberof TestObjectResource
     */
    maxDuration?: number;
    /**
     *
     * @type {number}
     * @memberof TestObjectResource
     */
    minDuration?: number;
    /**
     *
     * @type {ProjectResource}
     * @memberof TestObjectResource
     */
    project?: ProjectResource;
}
/**
 *
 * @export
 * @interface TestProjectResource
 */
export interface TestProjectResource {
    /**
     *
     * @type {number}
     * @memberof TestProjectResource
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof TestProjectResource
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof TestProjectResource
     */
    description?: string;
    /**
     *
     * @type {number}
     * @memberof TestProjectResource
     */
    uploadFileId?: number;
    /**
     *
     * @type {number}
     * @memberof TestProjectResource
     */
    projectId?: number;
    /**
     *
     * @type {number}
     * @memberof TestProjectResource
     */
    teamId?: number;
    /**
     *
     * @type {string}
     * @memberof TestProjectResource
     */
    createdAt?: string;
    /**
     *
     * @type {JobResource}
     * @memberof TestProjectResource
     */
    latestJob?: JobResource;
    /**
     *
     * @type {string}
     * @memberof TestProjectResource
     */
    uploadFileName?: string;
    /**
     *
     * @type {string}
     * @memberof TestProjectResource
     */
    type?: TestProjectResourceTypeEnum;
    /**
     *
     * @type {GitRepositoryResource}
     * @memberof TestProjectResource
     */
    gitRepository?: GitRepositoryResource;
    /**
     *
     * @type {Array<TestSuiteCollectionResource>}
     * @memberof TestProjectResource
     */
    testSuiteCollections?: Array<TestSuiteCollectionResource>;
}
/**
    * @export
    * @enum {string}
    */
export declare enum TestProjectResourceTypeEnum {
    Ks = "KS",
    Git = "GIT"
}
/**
 *
 * @export
 * @interface TestResultAssertionFailedResource
 */
export interface TestResultAssertionFailedResource {
    /**
     *
     * @type {number}
     * @memberof TestResultAssertionFailedResource
     */
    id?: number;
    /**
     *
     * @type {number}
     * @memberof TestResultAssertionFailedResource
     */
    executionTestResultId?: number;
    /**
     *
     * @type {ExecutionTestResultResource}
     * @memberof TestResultAssertionFailedResource
     */
    executionTestResultResource?: ExecutionTestResultResource;
    /**
     *
     * @type {string}
     * @memberof TestResultAssertionFailedResource
     */
    stacktrace?: string;
    /**
     *
     * @type {string}
     * @memberof TestResultAssertionFailedResource
     */
    message?: string;
    /**
     *
     * @type {string}
     * @memberof TestResultAssertionFailedResource
     */
    logTime?: string;
}
/**
 *
 * @export
 * @interface TestResultAssertionResource
 */
export interface TestResultAssertionResource {
    /**
     *
     * @type {number}
     * @memberof TestResultAssertionResource
     */
    executionTestResultId?: number;
    /**
     *
     * @type {ExecutionTestResultResource}
     * @memberof TestResultAssertionResource
     */
    executionTestResult?: ExecutionTestResultResource;
    /**
     *
     * @type {number}
     * @memberof TestResultAssertionResource
     */
    totalAssertion?: number;
    /**
     *
     * @type {number}
     * @memberof TestResultAssertionResource
     */
    passedAssertion?: number;
    /**
     *
     * @type {number}
     * @memberof TestResultAssertionResource
     */
    failedAssertion?: number;
}
/**
 *
 * @export
 * @interface TestRunResult
 */
export interface TestRunResult {
    /**
     *
     * @type {string}
     * @memberof TestRunResult
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof TestRunResult
     */
    status?: string;
    /**
     *
     * @type {string}
     * @memberof TestRunResult
     */
    sessionId?: string;
    /**
     *
     * @type {string}
     * @memberof TestRunResult
     */
    testSuiteId?: string;
    /**
     *
     * @type {boolean}
     * @memberof TestRunResult
     */
    end?: boolean;
}
/**
 *
 * @export
 * @interface TestSuiteCollectionEntityResource
 */
export interface TestSuiteCollectionEntityResource {
    /**
     *
     * @type {number}
     * @memberof TestSuiteCollectionEntityResource
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof TestSuiteCollectionEntityResource
     */
    name?: string;
    /**
     *
     * @type {ProjectResource}
     * @memberof TestSuiteCollectionEntityResource
     */
    project?: ProjectResource;
    /**
     *
     * @type {string}
     * @memberof TestSuiteCollectionEntityResource
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof TestSuiteCollectionEntityResource
     */
    urlId?: string;
}
/**
 *
 * @export
 * @interface TestSuiteCollectionResource
 */
export interface TestSuiteCollectionResource {
    /**
     *
     * @type {number}
     * @memberof TestSuiteCollectionResource
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof TestSuiteCollectionResource
     */
    name?: string;
    /**
     *
     * @type {ProjectResource}
     * @memberof TestSuiteCollectionResource
     */
    project?: ProjectResource;
    /**
     *
     * @type {string}
     * @memberof TestSuiteCollectionResource
     */
    urlId?: string;
}
/**
 *
 * @export
 * @interface TestSuiteResource
 */
export interface TestSuiteResource {
    /**
     *
     * @type {number}
     * @memberof TestSuiteResource
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof TestSuiteResource
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof TestSuiteResource
     */
    path?: string;
    /**
     *
     * @type {ProjectResource}
     * @memberof TestSuiteResource
     */
    project?: ProjectResource;
    /**
     *
     * @type {string}
     * @memberof TestSuiteResource
     */
    alias?: string;
    /**
     *
     * @type {ExecutionTestSuiteResource}
     * @memberof TestSuiteResource
     */
    lastExecutionTestSuite?: ExecutionTestSuiteResource;
    /**
     *
     * @type {string}
     * @memberof TestSuiteResource
     */
    urlId?: string;
}
/**
 *
 * @export
 * @interface TimeZoneResource
 */
export interface TimeZoneResource {
    /**
     *
     * @type {string}
     * @memberof TimeZoneResource
     */
    zoneId?: string;
    /**
     *
     * @type {string}
     * @memberof TimeZoneResource
     */
    name?: string;
    /**
     *
     * @type {TimeZoneResourceOffset}
     * @memberof TimeZoneResource
     */
    offset?: TimeZoneResourceOffset;
}
/**
 *
 * @export
 * @interface TimeZoneResourceOffset
 */
export interface TimeZoneResourceOffset {
    /**
     *
     * @type {number}
     * @memberof TimeZoneResourceOffset
     */
    totalSeconds?: number;
    /**
     *
     * @type {string}
     * @memberof TimeZoneResourceOffset
     */
    id?: string;
    /**
     *
     * @type {TimeZoneResourceOffsetRules}
     * @memberof TimeZoneResourceOffset
     */
    rules?: TimeZoneResourceOffsetRules;
}
/**
 *
 * @export
 * @interface TimeZoneResourceOffsetRules
 */
export interface TimeZoneResourceOffsetRules {
    /**
     *
     * @type {boolean}
     * @memberof TimeZoneResourceOffsetRules
     */
    fixedOffset?: boolean;
    /**
     *
     * @type {Array<TimeZoneResourceOffsetRulesTransitions>}
     * @memberof TimeZoneResourceOffsetRules
     */
    transitions?: Array<TimeZoneResourceOffsetRulesTransitions>;
    /**
     *
     * @type {Array<TimeZoneResourceOffsetRulesTransitionRules>}
     * @memberof TimeZoneResourceOffsetRules
     */
    transitionRules?: Array<TimeZoneResourceOffsetRulesTransitionRules>;
}
/**
 *
 * @export
 * @interface TimeZoneResourceOffsetRulesDuration
 */
export interface TimeZoneResourceOffsetRulesDuration {
    /**
     *
     * @type {number}
     * @memberof TimeZoneResourceOffsetRulesDuration
     */
    seconds?: number;
    /**
     *
     * @type {number}
     * @memberof TimeZoneResourceOffsetRulesDuration
     */
    nano?: number;
    /**
     *
     * @type {Array<TimeZoneResourceOffsetRulesDurationUnits>}
     * @memberof TimeZoneResourceOffsetRulesDuration
     */
    units?: Array<TimeZoneResourceOffsetRulesDurationUnits>;
    /**
     *
     * @type {boolean}
     * @memberof TimeZoneResourceOffsetRulesDuration
     */
    zero?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof TimeZoneResourceOffsetRulesDuration
     */
    negative?: boolean;
}
/**
 *
 * @export
 * @interface TimeZoneResourceOffsetRulesDurationUnits
 */
export interface TimeZoneResourceOffsetRulesDurationUnits {
    /**
     *
     * @type {boolean}
     * @memberof TimeZoneResourceOffsetRulesDurationUnits
     */
    dateBased?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof TimeZoneResourceOffsetRulesDurationUnits
     */
    timeBased?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof TimeZoneResourceOffsetRulesDurationUnits
     */
    durationEstimated?: boolean;
}
/**
 *
 * @export
 * @interface TimeZoneResourceOffsetRulesTransitionRules
 */
export interface TimeZoneResourceOffsetRulesTransitionRules {
    /**
     *
     * @type {string}
     * @memberof TimeZoneResourceOffsetRulesTransitionRules
     */
    month?: TimeZoneResourceOffsetRulesTransitionRulesMonthEnum;
    /**
     *
     * @type {string}
     * @memberof TimeZoneResourceOffsetRulesTransitionRules
     */
    timeDefinition?: TimeZoneResourceOffsetRulesTransitionRulesTimeDefinitionEnum;
    /**
     *
     * @type {string}
     * @memberof TimeZoneResourceOffsetRulesTransitionRules
     */
    dayOfWeek?: TimeZoneResourceOffsetRulesTransitionRulesDayOfWeekEnum;
    /**
     *
     * @type {number}
     * @memberof TimeZoneResourceOffsetRulesTransitionRules
     */
    dayOfMonthIndicator?: number;
    /**
     *
     * @type {boolean}
     * @memberof TimeZoneResourceOffsetRulesTransitionRules
     */
    midnightEndOfDay?: boolean;
    /**
     *
     * @type {LocalTime}
     * @memberof TimeZoneResourceOffsetRulesTransitionRules
     */
    localTime?: LocalTime;
}
/**
    * @export
    * @enum {string}
    */
export declare enum TimeZoneResourceOffsetRulesTransitionRulesMonthEnum {
    January = "JANUARY",
    February = "FEBRUARY",
    March = "MARCH",
    April = "APRIL",
    May = "MAY",
    June = "JUNE",
    July = "JULY",
    August = "AUGUST",
    September = "SEPTEMBER",
    October = "OCTOBER",
    November = "NOVEMBER",
    December = "DECEMBER"
}
/**
    * @export
    * @enum {string}
    */
export declare enum TimeZoneResourceOffsetRulesTransitionRulesTimeDefinitionEnum {
    Utc = "UTC",
    Wall = "WALL",
    Standard = "STANDARD"
}
/**
    * @export
    * @enum {string}
    */
export declare enum TimeZoneResourceOffsetRulesTransitionRulesDayOfWeekEnum {
    Monday = "MONDAY",
    Tuesday = "TUESDAY",
    Wednesday = "WEDNESDAY",
    Thursday = "THURSDAY",
    Friday = "FRIDAY",
    Saturday = "SATURDAY",
    Sunday = "SUNDAY"
}
/**
 *
 * @export
 * @interface TimeZoneResourceOffsetRulesTransitions
 */
export interface TimeZoneResourceOffsetRulesTransitions {
    /**
     *
     * @type {string}
     * @memberof TimeZoneResourceOffsetRulesTransitions
     */
    instant?: string;
    /**
     *
     * @type {TimeZoneResourceOffsetRulesDuration}
     * @memberof TimeZoneResourceOffsetRulesTransitions
     */
    duration?: TimeZoneResourceOffsetRulesDuration;
    /**
     *
     * @type {boolean}
     * @memberof TimeZoneResourceOffsetRulesTransitions
     */
    gap?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof TimeZoneResourceOffsetRulesTransitions
     */
    overlap?: boolean;
    /**
     *
     * @type {string}
     * @memberof TimeZoneResourceOffsetRulesTransitions
     */
    dateTimeAfter?: string;
    /**
     *
     * @type {string}
     * @memberof TimeZoneResourceOffsetRulesTransitions
     */
    dateTimeBefore?: string;
}
/**
 *
 * @export
 * @interface TriggerBuildParameter
 */
export interface TriggerBuildParameter {
    /**
     *
     * @type {string}
     * @memberof TriggerBuildParameter
     */
    downloadUrl?: string;
    /**
     *
     * @type {string}
     * @memberof TriggerBuildParameter
     */
    command?: string;
    /**
     *
     * @type {Array<EnvironmentVariable>}
     * @memberof TriggerBuildParameter
     */
    environmentVariables?: Array<EnvironmentVariable>;
    /**
     *
     * @type {string}
     * @memberof TriggerBuildParameter
     */
    sessionId?: string;
    /**
     *
     * @type {string}
     * @memberof TriggerBuildParameter
     */
    ksVersion?: string;
    /**
     *
     * @type {string}
     * @memberof TriggerBuildParameter
     */
    ksLocation?: string;
    /**
     *
     * @type {string}
     * @memberof TriggerBuildParameter
     */
    configType?: TriggerBuildParameterConfigTypeEnum;
    /**
     *
     * @type {string}
     * @memberof TriggerBuildParameter
     */
    type?: TriggerBuildParameterTypeEnum;
    /**
     *
     * @type {GitRepositoryResource}
     * @memberof TriggerBuildParameter
     */
    gitRepositoryResource?: GitRepositoryResource;
}
/**
    * @export
    * @enum {string}
    */
export declare enum TriggerBuildParameterConfigTypeEnum {
    Tsc = "TSC",
    Command = "COMMAND",
    GenericCommand = "GENERIC_COMMAND"
}
/**
    * @export
    * @enum {string}
    */
export declare enum TriggerBuildParameterTypeEnum {
    Ks = "KS",
    Git = "GIT"
}
/**
 *
 * @export
 * @interface UploadBatchFileResource
 */
export interface UploadBatchFileResource {
    /**
     *
     * @type {string}
     * @memberof UploadBatchFileResource
     */
    folderPath?: string;
    /**
     *
     * @type {boolean}
     * @memberof UploadBatchFileResource
     */
    end?: boolean;
    /**
     *
     * @type {string}
     * @memberof UploadBatchFileResource
     */
    fileName?: string;
    /**
     *
     * @type {string}
     * @memberof UploadBatchFileResource
     */
    uploadedPath?: string;
}
/**
 *
 * @export
 * @interface UploadBatchResource
 */
export interface UploadBatchResource {
    /**
     *
     * @type {number}
     * @memberof UploadBatchResource
     */
    id?: number;
    /**
     *
     * @type {boolean}
     * @memberof UploadBatchResource
     */
    done?: boolean;
    /**
     *
     * @type {string}
     * @memberof UploadBatchResource
     */
    webUrl?: string;
}
/**
 *
 * @export
 * @interface UploadFileResource
 */
export interface UploadFileResource {
    /**
     *
     * @type {string}
     * @memberof UploadFileResource
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof UploadFileResource
     */
    fileName?: string;
    /**
     *
     * @type {string}
     * @memberof UploadFileResource
     */
    type?: UploadFileResourceTypeEnum;
    /**
     *
     * @type {string}
     * @memberof UploadFileResource
     */
    base64Content?: string;
    /**
     *
     * @type {number}
     * @memberof UploadFileResource
     */
    fileHandleId?: number;
}
/**
    * @export
    * @enum {string}
    */
export declare enum UploadFileResourceTypeEnum {
    TscExecution = "TSC_EXECUTION",
    TsExecution = "TS_EXECUTION",
    Attachment = "ATTACHMENT",
    Properties = "PROPERTIES",
    Har = "HAR",
    Uuid = "UUID",
    Zip = "ZIP",
    Bdd = "BDD",
    TestopsReportMetadata = "TESTOPS_REPORT_METADATA",
    TestopsReportExecution = "TESTOPS_REPORT_EXECUTION",
    TestopsReportSuites = "TESTOPS_REPORT_SUITES",
    TestopsReportResults = "TESTOPS_REPORT_RESULTS"
}
/**
 *
 * @export
 * @interface UserOrganizationFeatureResource
 */
export interface UserOrganizationFeatureResource {
    /**
     *
     * @type {UserResource}
     * @memberof UserOrganizationFeatureResource
     */
    user?: UserResource;
    /**
     *
     * @type {number}
     * @memberof UserOrganizationFeatureResource
     */
    userId?: number;
    /**
     *
     * @type {number}
     * @memberof UserOrganizationFeatureResource
     */
    organizationId?: number;
    /**
     *
     * @type {string}
     * @memberof UserOrganizationFeatureResource
     */
    userEmail?: string;
    /**
     *
     * @type {OrganizationResource}
     * @memberof UserOrganizationFeatureResource
     */
    organization?: OrganizationResource;
    /**
     *
     * @type {string}
     * @memberof UserOrganizationFeatureResource
     */
    feature?: UserOrganizationFeatureResourceFeatureEnum;
}
/**
    * @export
    * @enum {string}
    */
export declare enum UserOrganizationFeatureResourceFeatureEnum {
    Kse = "KSE",
    Engine = "ENGINE",
    Testops = "TESTOPS",
    FloatingEngine = "FLOATING_ENGINE",
    UnlimitedKse = "UNLIMITED_KSE",
    UnlimitedEngine = "UNLIMITED_ENGINE"
}
/**
 *
 * @export
 * @interface UserResource
 */
export interface UserResource {
    /**
     *
     * @type {number}
     * @memberof UserResource
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof UserResource
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof UserResource
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof UserResource
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof UserResource
     */
    password?: string;
    /**
     *
     * @type {string}
     * @memberof UserResource
     */
    invitingUrl?: string;
    /**
     *
     * @type {string}
     * @memberof UserResource
     */
    avatar?: string;
    /**
     *
     * @type {ConfigResource}
     * @memberof UserResource
     */
    configs?: ConfigResource;
    /**
     *
     * @type {Array<ProjectResource>}
     * @memberof UserResource
     */
    projects?: Array<ProjectResource>;
    /**
     *
     * @type {Array<TeamResource>}
     * @memberof UserResource
     */
    teams?: Array<TeamResource>;
    /**
     *
     * @type {Array<OrganizationResource>}
     * @memberof UserResource
     */
    organizations?: Array<OrganizationResource>;
    /**
     *
     * @type {Array<UserOrganizationFeatureResource>}
     * @memberof UserResource
     */
    organizationFeature?: Array<UserOrganizationFeatureResource>;
    /**
     *
     * @type {string}
     * @memberof UserResource
     */
    trialExpirationDate?: string;
    /**
     *
     * @type {string}
     * @memberof UserResource
     */
    systemRole?: UserResourceSystemRoleEnum;
    /**
     *
     * @type {boolean}
     * @memberof UserResource
     */
    businessUser?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof UserResource
     */
    canCreateOfflineKSE?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof UserResource
     */
    canCreateOfflineRE?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof UserResource
     */
    samlSSO?: boolean;
    /**
     *
     * @type {string}
     * @memberof UserResource
     */
    fullName?: string;
}
/**
    * @export
    * @enum {string}
    */
export declare enum UserResourceSystemRoleEnum {
    User = "USER",
    KatalonAdmin = "KATALON_ADMIN"
}
/**
 *
 * @export
 * @interface UserSettingResource
 */
export interface UserSettingResource {
    /**
     *
     * @type {boolean}
     * @memberof UserSettingResource
     */
    mailJobStart?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof UserSettingResource
     */
    mailJobEnd?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof UserSettingResource
     */
    mailExecution?: boolean;
    /**
     *
     * @type {string}
     * @memberof UserSettingResource
     */
    mailExecutionStatus?: string;
    /**
     *
     * @type {boolean}
     * @memberof UserSettingResource
     */
    mailWeeklyUpdate?: boolean;
}
/**
 *
 * @export
 * @interface UserTeamResource
 */
export interface UserTeamResource {
    /**
     *
     * @type {number}
     * @memberof UserTeamResource
     */
    id?: number;
    /**
     *
     * @type {number}
     * @memberof UserTeamResource
     */
    userId?: number;
    /**
     *
     * @type {number}
     * @memberof UserTeamResource
     */
    teamId?: number;
    /**
     *
     * @type {string}
     * @memberof UserTeamResource
     */
    role?: UserTeamResourceRoleEnum;
}
/**
    * @export
    * @enum {string}
    */
export declare enum UserTeamResourceRoleEnum {
    Owner = "OWNER",
    Admin = "ADMIN",
    User = "USER"
}
/**
 * AgentApi - axios parameter creator
 * @export
 */
export declare const AgentApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Deletes a Local agent. Returns the deleted agent detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _delete: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates or updates a Local agent. Returns the agent detail.
     * @param {AgentResource} agentResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create: (agentResource: AgentResource, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates a new CircleCI agent. Returns the created agent detail.
     * @param {CircleCIAgentResource} circleCIAgentResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create4: (circleCIAgentResource: CircleCIAgentResource, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates a K8S agent. Returns the created agent detail.
     * @param {K8SAgentResource} k8SAgentResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create5: (k8SAgentResource: K8SAgentResource, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Generates the configuration file for the Local agent. Returns the configuration file.
     * @param {AgentConfigResource} agentConfigResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateAgent: (agentConfigResource: AgentConfigResource, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a Local agent. Returns the agent detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns a CircleCI agent detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get11: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns a K8S agent detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get13: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {CircleCIConnectionResource} circleCIConnectionResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFollowedProjects: (circleCIConnectionResource: CircleCIConnectionResource, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates a CircleCI agent detail. Returns the updated agent detail.
     * @param {CircleCIAgentResource} circleCIAgentResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update6: (circleCIAgentResource: CircleCIAgentResource, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates a K8S agent detail. Returns the updated agent detail.
     * @param {K8SAgentResource} k8SAgentResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update7: (k8SAgentResource: K8SAgentResource, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates the threshold for Local agent. Returns the agent detail.
     * @param {AgentResource} agentResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateThreshold: (agentResource: AgentResource, options?: any) => Promise<RequestArgs>;
};
/**
 * AgentApi - functional programming interface
 * @export
 */
export declare const AgentApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Deletes a Local agent. Returns the deleted agent detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _delete(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgentResource>>;
    /**
     *
     * @summary Creates or updates a Local agent. Returns the agent detail.
     * @param {AgentResource} agentResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create(agentResource: AgentResource, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgentResource>>;
    /**
     *
     * @summary Creates a new CircleCI agent. Returns the created agent detail.
     * @param {CircleCIAgentResource} circleCIAgentResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create4(circleCIAgentResource: CircleCIAgentResource, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CircleCIAgentResource>>;
    /**
     *
     * @summary Creates a K8S agent. Returns the created agent detail.
     * @param {K8SAgentResource} k8SAgentResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create5(k8SAgentResource: K8SAgentResource, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<K8SAgentResource>>;
    /**
     *
     * @summary Generates the configuration file for the Local agent. Returns the configuration file.
     * @param {AgentConfigResource} agentConfigResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateAgent(agentConfigResource: AgentConfigResource, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get a Local agent. Returns the agent detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgentResource>>;
    /**
     *
     * @summary Returns a CircleCI agent detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get11(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CircleCIAgentResource>>;
    /**
     *
     * @summary Returns a K8S agent detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get13(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<K8SAgentResource>>;
    /**
     *
     * @param {CircleCIConnectionResource} circleCIConnectionResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFollowedProjects(circleCIConnectionResource: CircleCIConnectionResource, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CircleCIProject>>>;
    /**
     *
     * @summary Updates a CircleCI agent detail. Returns the updated agent detail.
     * @param {CircleCIAgentResource} circleCIAgentResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update6(circleCIAgentResource: CircleCIAgentResource, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CircleCIAgentResource>>;
    /**
     *
     * @summary Updates a K8S agent detail. Returns the updated agent detail.
     * @param {K8SAgentResource} k8SAgentResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update7(k8SAgentResource: K8SAgentResource, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<K8SAgentResource>>;
    /**
     *
     * @summary Updates the threshold for Local agent. Returns the agent detail.
     * @param {AgentResource} agentResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateThreshold(agentResource: AgentResource, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgentResource>>;
};
/**
 * AgentApi - factory interface
 * @export
 */
export declare const AgentApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Deletes a Local agent. Returns the deleted agent detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    _delete(id: number, options?: any): AxiosPromise<AgentResource>;
    /**
     *
     * @summary Creates or updates a Local agent. Returns the agent detail.
     * @param {AgentResource} agentResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create(agentResource: AgentResource, options?: any): AxiosPromise<AgentResource>;
    /**
     *
     * @summary Creates a new CircleCI agent. Returns the created agent detail.
     * @param {CircleCIAgentResource} circleCIAgentResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create4(circleCIAgentResource: CircleCIAgentResource, options?: any): AxiosPromise<CircleCIAgentResource>;
    /**
     *
     * @summary Creates a K8S agent. Returns the created agent detail.
     * @param {K8SAgentResource} k8SAgentResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create5(k8SAgentResource: K8SAgentResource, options?: any): AxiosPromise<K8SAgentResource>;
    /**
     *
     * @summary Generates the configuration file for the Local agent. Returns the configuration file.
     * @param {AgentConfigResource} agentConfigResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateAgent(agentConfigResource: AgentConfigResource, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Get a Local agent. Returns the agent detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get(id: number, options?: any): AxiosPromise<AgentResource>;
    /**
     *
     * @summary Returns a CircleCI agent detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get11(id: number, options?: any): AxiosPromise<CircleCIAgentResource>;
    /**
     *
     * @summary Returns a K8S agent detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get13(id: number, options?: any): AxiosPromise<K8SAgentResource>;
    /**
     *
     * @param {CircleCIConnectionResource} circleCIConnectionResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFollowedProjects(circleCIConnectionResource: CircleCIConnectionResource, options?: any): AxiosPromise<Array<CircleCIProject>>;
    /**
     *
     * @summary Updates a CircleCI agent detail. Returns the updated agent detail.
     * @param {CircleCIAgentResource} circleCIAgentResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update6(circleCIAgentResource: CircleCIAgentResource, options?: any): AxiosPromise<CircleCIAgentResource>;
    /**
     *
     * @summary Updates a K8S agent detail. Returns the updated agent detail.
     * @param {K8SAgentResource} k8SAgentResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update7(k8SAgentResource: K8SAgentResource, options?: any): AxiosPromise<K8SAgentResource>;
    /**
     *
     * @summary Updates the threshold for Local agent. Returns the agent detail.
     * @param {AgentResource} agentResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateThreshold(agentResource: AgentResource, options?: any): AxiosPromise<AgentResource>;
};
/**
 * AgentApi - object-oriented interface
 * @export
 * @class AgentApi
 * @extends {BaseAPI}
 */
export declare class AgentApi extends BaseAPI {
    /**
     *
     * @summary Deletes a Local agent. Returns the deleted agent detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentApi
     */
    _delete(id: number, options?: any): Promise<import("axios").AxiosResponse<AgentResource>>;
    /**
     *
     * @summary Creates or updates a Local agent. Returns the agent detail.
     * @param {AgentResource} agentResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentApi
     */
    create(agentResource: AgentResource, options?: any): Promise<import("axios").AxiosResponse<AgentResource>>;
    /**
     *
     * @summary Creates a new CircleCI agent. Returns the created agent detail.
     * @param {CircleCIAgentResource} circleCIAgentResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentApi
     */
    create4(circleCIAgentResource: CircleCIAgentResource, options?: any): Promise<import("axios").AxiosResponse<CircleCIAgentResource>>;
    /**
     *
     * @summary Creates a K8S agent. Returns the created agent detail.
     * @param {K8SAgentResource} k8SAgentResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentApi
     */
    create5(k8SAgentResource: K8SAgentResource, options?: any): Promise<import("axios").AxiosResponse<K8SAgentResource>>;
    /**
     *
     * @summary Generates the configuration file for the Local agent. Returns the configuration file.
     * @param {AgentConfigResource} agentConfigResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentApi
     */
    generateAgent(agentConfigResource: AgentConfigResource, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary Get a Local agent. Returns the agent detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentApi
     */
    get(id: number, options?: any): Promise<import("axios").AxiosResponse<AgentResource>>;
    /**
     *
     * @summary Returns a CircleCI agent detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentApi
     */
    get11(id: number, options?: any): Promise<import("axios").AxiosResponse<CircleCIAgentResource>>;
    /**
     *
     * @summary Returns a K8S agent detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentApi
     */
    get13(id: number, options?: any): Promise<import("axios").AxiosResponse<K8SAgentResource>>;
    /**
     *
     * @param {CircleCIConnectionResource} circleCIConnectionResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentApi
     */
    getFollowedProjects(circleCIConnectionResource: CircleCIConnectionResource, options?: any): Promise<import("axios").AxiosResponse<CircleCIProject[]>>;
    /**
     *
     * @summary Updates a CircleCI agent detail. Returns the updated agent detail.
     * @param {CircleCIAgentResource} circleCIAgentResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentApi
     */
    update6(circleCIAgentResource: CircleCIAgentResource, options?: any): Promise<import("axios").AxiosResponse<CircleCIAgentResource>>;
    /**
     *
     * @summary Updates a K8S agent detail. Returns the updated agent detail.
     * @param {K8SAgentResource} k8SAgentResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentApi
     */
    update7(k8SAgentResource: K8SAgentResource, options?: any): Promise<import("axios").AxiosResponse<K8SAgentResource>>;
    /**
     *
     * @summary Updates the threshold for Local agent. Returns the agent detail.
     * @param {AgentResource} agentResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentApi
     */
    updateThreshold(agentResource: AgentResource, options?: any): Promise<import("axios").AxiosResponse<AgentResource>>;
}
/**
 * CommentApi - axios parameter creator
 * @export
 */
export declare const CommentApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Creates a Comment. Returns the created Comment detail.
     * @param {CommentResource} commentResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create1: (commentResource: CommentResource, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates a Comment detail. Returns the updated Comment detail.
     * @param {CommentResource} commentResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update: (commentResource: CommentResource, options?: any) => Promise<RequestArgs>;
};
/**
 * CommentApi - functional programming interface
 * @export
 */
export declare const CommentApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Creates a Comment. Returns the created Comment detail.
     * @param {CommentResource} commentResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create1(commentResource: CommentResource, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentResource>>;
    /**
     *
     * @summary Updates a Comment detail. Returns the updated Comment detail.
     * @param {CommentResource} commentResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update(commentResource: CommentResource, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentResource>>;
};
/**
 * CommentApi - factory interface
 * @export
 */
export declare const CommentApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Creates a Comment. Returns the created Comment detail.
     * @param {CommentResource} commentResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create1(commentResource: CommentResource, options?: any): AxiosPromise<CommentResource>;
    /**
     *
     * @summary Updates a Comment detail. Returns the updated Comment detail.
     * @param {CommentResource} commentResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update(commentResource: CommentResource, options?: any): AxiosPromise<CommentResource>;
};
/**
 * CommentApi - object-oriented interface
 * @export
 * @class CommentApi
 * @extends {BaseAPI}
 */
export declare class CommentApi extends BaseAPI {
    /**
     *
     * @summary Creates a Comment. Returns the created Comment detail.
     * @param {CommentResource} commentResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentApi
     */
    create1(commentResource: CommentResource, options?: any): Promise<import("axios").AxiosResponse<CommentResource>>;
    /**
     *
     * @summary Updates a Comment detail. Returns the updated Comment detail.
     * @param {CommentResource} commentResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentApi
     */
    update(commentResource: CommentResource, options?: any): Promise<import("axios").AxiosResponse<CommentResource>>;
}
/**
 * ExecutionApi - axios parameter creator
 * @export
 */
export declare const ExecutionApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Exports and downloads multiple Executions. Returns the archive file comprising the Execution summaries.
     * @param {Array<number>} id
     * @param {number} projectId
     * @param {string} [fileType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkDownload: (id: Array<number>, projectId: number, fileType?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes multiple Executions. Returns the deleted Execution details.
     * @param {number} projectId
     * @param {Array<number>} order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delete1: (projectId: number, order: Array<number>, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Exports and downloads an Execution. Returns the Execution summary file.
     * @param {number} id
     * @param {string} [fileType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    download1: (id: number, fileType?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Downloads all uploaded files of an Execution. Returns the archive file comprising all Execution\'s files.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    downloadFile: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns an Execution detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get1: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id
     * @param {Pageable} pageable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestExecutions: (id: number, pageable: Pageable, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Link an Execution to a Release. Returns the updated Execution detail.
     * @param {number} id
     * @param {number} projectId
     * @param {number} releaseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkRelease: (id: number, projectId: number, releaseId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {Pageable} pageable
     * @param {string} [batch]
     * @param {number} [projectId]
     * @param {number} [order]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list: (pageable: Pageable, batch?: string, projectId?: number, order?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Re-imports an Execution. Returns the newly imported Execution detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reImportExecution: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Rerun an Execution.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rerunExecution: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Allow users to send email with attached execution reports [PDF].
     * @param {number} id
     * @param {ExecutionShareReportResource} executionShareReportResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shareExecutionReport: (id: number, executionShareReportResource: ExecutionShareReportResource, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Terminates a running Execution. Returns the terminated Execution detail.
     * @param {number} projectId
     * @param {number} order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    terminatedExecution: (projectId: number, order: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Unlink an Execution to a Release. Returns the updated Execution detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unlinkRelease: (id: number, options?: any) => Promise<RequestArgs>;
};
/**
 * ExecutionApi - functional programming interface
 * @export
 */
export declare const ExecutionApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Exports and downloads multiple Executions. Returns the archive file comprising the Execution summaries.
     * @param {Array<number>} id
     * @param {number} projectId
     * @param {string} [fileType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkDownload(id: Array<number>, projectId: number, fileType?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Deletes multiple Executions. Returns the deleted Execution details.
     * @param {number} projectId
     * @param {Array<number>} order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delete1(projectId: number, order: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExecutionResource>>>;
    /**
     *
     * @summary Exports and downloads an Execution. Returns the Execution summary file.
     * @param {number} id
     * @param {string} [fileType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    download1(id: number, fileType?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Downloads all uploaded files of an Execution. Returns the archive file comprising all Execution\'s files.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    downloadFile(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Returns an Execution detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get1(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExecutionResource>>;
    /**
     *
     * @param {number} id
     * @param {Pageable} pageable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestExecutions(id: number, pageable: Pageable, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageExecutionResource>>;
    /**
     *
     * @summary Link an Execution to a Release. Returns the updated Execution detail.
     * @param {number} id
     * @param {number} projectId
     * @param {number} releaseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkRelease(id: number, projectId: number, releaseId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExecutionResource>>;
    /**
     *
     * @param {Pageable} pageable
     * @param {string} [batch]
     * @param {number} [projectId]
     * @param {number} [order]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list(pageable: Pageable, batch?: string, projectId?: number, order?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Re-imports an Execution. Returns the newly imported Execution detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reImportExecution(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExecutionResource>>;
    /**
     *
     * @summary Rerun an Execution.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rerunExecution(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Allow users to send email with attached execution reports [PDF].
     * @param {number} id
     * @param {ExecutionShareReportResource} executionShareReportResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shareExecutionReport(id: number, executionShareReportResource: ExecutionShareReportResource, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Terminates a running Execution. Returns the terminated Execution detail.
     * @param {number} projectId
     * @param {number} order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    terminatedExecution(projectId: number, order: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExecutionResource>>;
    /**
     *
     * @summary Unlink an Execution to a Release. Returns the updated Execution detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unlinkRelease(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExecutionResource>>;
};
/**
 * ExecutionApi - factory interface
 * @export
 */
export declare const ExecutionApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Exports and downloads multiple Executions. Returns the archive file comprising the Execution summaries.
     * @param {Array<number>} id
     * @param {number} projectId
     * @param {string} [fileType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bulkDownload(id: Array<number>, projectId: number, fileType?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Deletes multiple Executions. Returns the deleted Execution details.
     * @param {number} projectId
     * @param {Array<number>} order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delete1(projectId: number, order: Array<number>, options?: any): AxiosPromise<Array<ExecutionResource>>;
    /**
     *
     * @summary Exports and downloads an Execution. Returns the Execution summary file.
     * @param {number} id
     * @param {string} [fileType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    download1(id: number, fileType?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Downloads all uploaded files of an Execution. Returns the archive file comprising all Execution\'s files.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    downloadFile(id: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Returns an Execution detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get1(id: number, options?: any): AxiosPromise<ExecutionResource>;
    /**
     *
     * @param {number} id
     * @param {Pageable} pageable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestExecutions(id: number, pageable: Pageable, options?: any): AxiosPromise<PageExecutionResource>;
    /**
     *
     * @summary Link an Execution to a Release. Returns the updated Execution detail.
     * @param {number} id
     * @param {number} projectId
     * @param {number} releaseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkRelease(id: number, projectId: number, releaseId: number, options?: any): AxiosPromise<ExecutionResource>;
    /**
     *
     * @param {Pageable} pageable
     * @param {string} [batch]
     * @param {number} [projectId]
     * @param {number} [order]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list(pageable: Pageable, batch?: string, projectId?: number, order?: number, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Re-imports an Execution. Returns the newly imported Execution detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reImportExecution(id: number, options?: any): AxiosPromise<ExecutionResource>;
    /**
     *
     * @summary Rerun an Execution.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rerunExecution(id: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Allow users to send email with attached execution reports [PDF].
     * @param {number} id
     * @param {ExecutionShareReportResource} executionShareReportResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shareExecutionReport(id: number, executionShareReportResource: ExecutionShareReportResource, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Terminates a running Execution. Returns the terminated Execution detail.
     * @param {number} projectId
     * @param {number} order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    terminatedExecution(projectId: number, order: number, options?: any): AxiosPromise<ExecutionResource>;
    /**
     *
     * @summary Unlink an Execution to a Release. Returns the updated Execution detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unlinkRelease(id: number, options?: any): AxiosPromise<ExecutionResource>;
};
/**
 * ExecutionApi - object-oriented interface
 * @export
 * @class ExecutionApi
 * @extends {BaseAPI}
 */
export declare class ExecutionApi extends BaseAPI {
    /**
     *
     * @summary Exports and downloads multiple Executions. Returns the archive file comprising the Execution summaries.
     * @param {Array<number>} id
     * @param {number} projectId
     * @param {string} [fileType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecutionApi
     */
    bulkDownload(id: Array<number>, projectId: number, fileType?: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary Deletes multiple Executions. Returns the deleted Execution details.
     * @param {number} projectId
     * @param {Array<number>} order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecutionApi
     */
    delete1(projectId: number, order: Array<number>, options?: any): Promise<import("axios").AxiosResponse<ExecutionResource[]>>;
    /**
     *
     * @summary Exports and downloads an Execution. Returns the Execution summary file.
     * @param {number} id
     * @param {string} [fileType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecutionApi
     */
    download1(id: number, fileType?: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary Downloads all uploaded files of an Execution. Returns the archive file comprising all Execution\'s files.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecutionApi
     */
    downloadFile(id: number, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary Returns an Execution detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecutionApi
     */
    get1(id: number, options?: any): Promise<import("axios").AxiosResponse<ExecutionResource>>;
    /**
     *
     * @param {number} id
     * @param {Pageable} pageable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecutionApi
     */
    getLatestExecutions(id: number, pageable: Pageable, options?: any): Promise<import("axios").AxiosResponse<PageExecutionResource>>;
    /**
     *
     * @summary Link an Execution to a Release. Returns the updated Execution detail.
     * @param {number} id
     * @param {number} projectId
     * @param {number} releaseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecutionApi
     */
    linkRelease(id: number, projectId: number, releaseId: number, options?: any): Promise<import("axios").AxiosResponse<ExecutionResource>>;
    /**
     *
     * @param {Pageable} pageable
     * @param {string} [batch]
     * @param {number} [projectId]
     * @param {number} [order]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecutionApi
     */
    list(pageable: Pageable, batch?: string, projectId?: number, order?: number, options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary Re-imports an Execution. Returns the newly imported Execution detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecutionApi
     */
    reImportExecution(id: number, options?: any): Promise<import("axios").AxiosResponse<ExecutionResource>>;
    /**
     *
     * @summary Rerun an Execution.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecutionApi
     */
    rerunExecution(id: number, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary Allow users to send email with attached execution reports [PDF].
     * @param {number} id
     * @param {ExecutionShareReportResource} executionShareReportResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecutionApi
     */
    shareExecutionReport(id: number, executionShareReportResource: ExecutionShareReportResource, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary Terminates a running Execution. Returns the terminated Execution detail.
     * @param {number} projectId
     * @param {number} order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecutionApi
     */
    terminatedExecution(projectId: number, order: number, options?: any): Promise<import("axios").AxiosResponse<ExecutionResource>>;
    /**
     *
     * @summary Unlink an Execution to a Release. Returns the updated Execution detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecutionApi
     */
    unlinkRelease(id: number, options?: any): Promise<import("axios").AxiosResponse<ExecutionResource>>;
}
/**
 * ExecutionRequestApi - axios parameter creator
 * @export
 */
export declare const ExecutionRequestApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Downloads an Execution Request report. Returns the report file.
     * @param {number} id
     * @param {string} [fileType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    download: (id: number, fileType?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns an Execution Request detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExecutionRequest: (id: number, options?: any) => Promise<RequestArgs>;
};
/**
 * ExecutionRequestApi - functional programming interface
 * @export
 */
export declare const ExecutionRequestApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Downloads an Execution Request report. Returns the report file.
     * @param {number} id
     * @param {string} [fileType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    download(id: number, fileType?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Returns an Execution Request detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExecutionRequest(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExecutionRequestResource>>;
};
/**
 * ExecutionRequestApi - factory interface
 * @export
 */
export declare const ExecutionRequestApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Downloads an Execution Request report. Returns the report file.
     * @param {number} id
     * @param {string} [fileType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    download(id: number, fileType?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Returns an Execution Request detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExecutionRequest(id: number, options?: any): AxiosPromise<ExecutionRequestResource>;
};
/**
 * ExecutionRequestApi - object-oriented interface
 * @export
 * @class ExecutionRequestApi
 * @extends {BaseAPI}
 */
export declare class ExecutionRequestApi extends BaseAPI {
    /**
     *
     * @summary Downloads an Execution Request report. Returns the report file.
     * @param {number} id
     * @param {string} [fileType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecutionRequestApi
     */
    download(id: number, fileType?: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary Returns an Execution Request detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecutionRequestApi
     */
    getExecutionRequest(id: number, options?: any): Promise<import("axios").AxiosResponse<ExecutionRequestResource>>;
}
/**
 * ExecutionTestResultApi - axios parameter creator
 * @export
 */
export declare const ExecutionTestResultApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Returns an Execution Test Result detail.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get2: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Downloads a test result\'s log. Returns the log file.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStdout: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Link an Execution Test Result to a Task. Returns the created binding detail.
     * @param {string} id
     * @param {IncidentExecutionTestResultResource} incidentExecutionTestResultResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkIncidents: (id: string, incidentExecutionTestResultResource: IncidentExecutionTestResultResource, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    markAsRetested: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Unlink an Execution Test Result to a Task. Returns the deleted binding detail.
     * @param {string} id
     * @param {IncidentExecutionTestResultResource} incidentExecutionTestResultResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unlinkIncidents: (id: string, incidentExecutionTestResultResource: IncidentExecutionTestResultResource, options?: any) => Promise<RequestArgs>;
};
/**
 * ExecutionTestResultApi - functional programming interface
 * @export
 */
export declare const ExecutionTestResultApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Returns an Execution Test Result detail.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get2(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExecutionTestResultResource>>;
    /**
     *
     * @summary Downloads a test result\'s log. Returns the log file.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStdout(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary Link an Execution Test Result to a Task. Returns the created binding detail.
     * @param {string} id
     * @param {IncidentExecutionTestResultResource} incidentExecutionTestResultResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkIncidents(id: string, incidentExecutionTestResultResource: IncidentExecutionTestResultResource, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IncidentExecutionTestResultResource>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    markAsRetested(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExecutionTestResultResource>>;
    /**
     *
     * @summary Unlink an Execution Test Result to a Task. Returns the deleted binding detail.
     * @param {string} id
     * @param {IncidentExecutionTestResultResource} incidentExecutionTestResultResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unlinkIncidents(id: string, incidentExecutionTestResultResource: IncidentExecutionTestResultResource, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IncidentExecutionTestResultResource>>;
};
/**
 * ExecutionTestResultApi - factory interface
 * @export
 */
export declare const ExecutionTestResultApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Returns an Execution Test Result detail.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get2(id: string, options?: any): AxiosPromise<ExecutionTestResultResource>;
    /**
     *
     * @summary Downloads a test result\'s log. Returns the log file.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStdout(id: number, options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Link an Execution Test Result to a Task. Returns the created binding detail.
     * @param {string} id
     * @param {IncidentExecutionTestResultResource} incidentExecutionTestResultResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkIncidents(id: string, incidentExecutionTestResultResource: IncidentExecutionTestResultResource, options?: any): AxiosPromise<IncidentExecutionTestResultResource>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    markAsRetested(id: string, options?: any): AxiosPromise<ExecutionTestResultResource>;
    /**
     *
     * @summary Unlink an Execution Test Result to a Task. Returns the deleted binding detail.
     * @param {string} id
     * @param {IncidentExecutionTestResultResource} incidentExecutionTestResultResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unlinkIncidents(id: string, incidentExecutionTestResultResource: IncidentExecutionTestResultResource, options?: any): AxiosPromise<IncidentExecutionTestResultResource>;
};
/**
 * ExecutionTestResultApi - object-oriented interface
 * @export
 * @class ExecutionTestResultApi
 * @extends {BaseAPI}
 */
export declare class ExecutionTestResultApi extends BaseAPI {
    /**
     *
     * @summary Returns an Execution Test Result detail.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecutionTestResultApi
     */
    get2(id: string, options?: any): Promise<import("axios").AxiosResponse<ExecutionTestResultResource>>;
    /**
     *
     * @summary Downloads a test result\'s log. Returns the log file.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecutionTestResultApi
     */
    getStdout(id: number, options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     *
     * @summary Link an Execution Test Result to a Task. Returns the created binding detail.
     * @param {string} id
     * @param {IncidentExecutionTestResultResource} incidentExecutionTestResultResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecutionTestResultApi
     */
    linkIncidents(id: string, incidentExecutionTestResultResource: IncidentExecutionTestResultResource, options?: any): Promise<import("axios").AxiosResponse<IncidentExecutionTestResultResource>>;
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecutionTestResultApi
     */
    markAsRetested(id: string, options?: any): Promise<import("axios").AxiosResponse<ExecutionTestResultResource>>;
    /**
     *
     * @summary Unlink an Execution Test Result to a Task. Returns the deleted binding detail.
     * @param {string} id
     * @param {IncidentExecutionTestResultResource} incidentExecutionTestResultResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecutionTestResultApi
     */
    unlinkIncidents(id: string, incidentExecutionTestResultResource: IncidentExecutionTestResultResource, options?: any): Promise<import("axios").AxiosResponse<IncidentExecutionTestResultResource>>;
}
/**
 * ExecutionTestSuiteApi - axios parameter creator
 * @export
 */
export declare const ExecutionTestSuiteApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Returns an Execution Test Suite detail.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get3: (id: string, options?: any) => Promise<RequestArgs>;
};
/**
 * ExecutionTestSuiteApi - functional programming interface
 * @export
 */
export declare const ExecutionTestSuiteApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Returns an Execution Test Suite detail.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get3(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExecutionTestSuiteResource>>;
};
/**
 * ExecutionTestSuiteApi - factory interface
 * @export
 */
export declare const ExecutionTestSuiteApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Returns an Execution Test Suite detail.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get3(id: string, options?: any): AxiosPromise<ExecutionTestSuiteResource>;
};
/**
 * ExecutionTestSuiteApi - object-oriented interface
 * @export
 * @class ExecutionTestSuiteApi
 * @extends {BaseAPI}
 */
export declare class ExecutionTestSuiteApi extends BaseAPI {
    /**
     *
     * @summary Returns an Execution Test Suite detail.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecutionTestSuiteApi
     */
    get3(id: string, options?: any): Promise<import("axios").AxiosResponse<ExecutionTestSuiteResource>>;
}
/**
 * FileApi - axios parameter creator
 * @export
 */
export declare const FileApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Downloads a file.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    download2: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns an upload URL.
     * @param {number} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUploadUrl: (projectId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns multiple upload URLs.
     * @param {number} projectId
     * @param {number} numberUrl
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUploadUrls: (projectId: number, numberUrl: number, options?: any) => Promise<RequestArgs>;
};
/**
 * FileApi - functional programming interface
 * @export
 */
export declare const FileApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Downloads a file.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    download2(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Returns an upload URL.
     * @param {number} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUploadUrl(projectId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileResource>>;
    /**
     *
     * @summary Returns multiple upload URLs.
     * @param {number} projectId
     * @param {number} numberUrl
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUploadUrls(projectId: number, numberUrl: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FileResource>>>;
};
/**
 * FileApi - factory interface
 * @export
 */
export declare const FileApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Downloads a file.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    download2(id: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Returns an upload URL.
     * @param {number} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUploadUrl(projectId: number, options?: any): AxiosPromise<FileResource>;
    /**
     *
     * @summary Returns multiple upload URLs.
     * @param {number} projectId
     * @param {number} numberUrl
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUploadUrls(projectId: number, numberUrl: number, options?: any): AxiosPromise<Array<FileResource>>;
};
/**
 * FileApi - object-oriented interface
 * @export
 * @class FileApi
 * @extends {BaseAPI}
 */
export declare class FileApi extends BaseAPI {
    /**
     *
     * @summary Downloads a file.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    download2(id: number, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary Returns an upload URL.
     * @param {number} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    getUploadUrl(projectId: number, options?: any): Promise<import("axios").AxiosResponse<FileResource>>;
    /**
     *
     * @summary Returns multiple upload URLs.
     * @param {number} projectId
     * @param {number} numberUrl
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    getUploadUrls(projectId: number, numberUrl: number, options?: any): Promise<import("axios").AxiosResponse<FileResource[]>>;
}
/**
 * JobApi - axios parameter creator
 * @export
 */
export declare const JobApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Cancels a Job.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancel: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns a Job detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get12: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns the next queued Job of an Agent.
     * @param {string} uuid
     * @param {number} teamId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getJob: (uuid: string, teamId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id
     * @param {Pageable} pageable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestJobs: (id: number, pageable: Pageable, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns a Job\'s log.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLog: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id
     * @param {Pageable} pageable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRunningJobs: (id: number, pageable: Pageable, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates a Job detail. Returns the updated Job detail.
     * @param {JobResource} jobResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateJob: (jobResource: JobResource, options?: any) => Promise<RequestArgs>;
};
/**
 * JobApi - functional programming interface
 * @export
 */
export declare const JobApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Cancels a Job.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancel(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Returns a Job detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get12(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobResource>>;
    /**
     *
     * @summary Returns the next queued Job of an Agent.
     * @param {string} uuid
     * @param {number} teamId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getJob(uuid: string, teamId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobResource>>;
    /**
     *
     * @param {number} id
     * @param {Pageable} pageable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestJobs(id: number, pageable: Pageable, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageJobResource>>;
    /**
     *
     * @summary Returns a Job\'s log.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLog(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BuildLog>>>;
    /**
     *
     * @param {number} id
     * @param {Pageable} pageable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRunningJobs(id: number, pageable: Pageable, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageJobResource>>;
    /**
     *
     * @summary Updates a Job detail. Returns the updated Job detail.
     * @param {JobResource} jobResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateJob(jobResource: JobResource, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobResource>>;
};
/**
 * JobApi - factory interface
 * @export
 */
export declare const JobApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Cancels a Job.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancel(id: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Returns a Job detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get12(id: number, options?: any): AxiosPromise<JobResource>;
    /**
     *
     * @summary Returns the next queued Job of an Agent.
     * @param {string} uuid
     * @param {number} teamId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getJob(uuid: string, teamId: number, options?: any): AxiosPromise<JobResource>;
    /**
     *
     * @param {number} id
     * @param {Pageable} pageable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLatestJobs(id: number, pageable: Pageable, options?: any): AxiosPromise<PageJobResource>;
    /**
     *
     * @summary Returns a Job\'s log.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLog(id: string, options?: any): AxiosPromise<Array<BuildLog>>;
    /**
     *
     * @param {number} id
     * @param {Pageable} pageable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRunningJobs(id: number, pageable: Pageable, options?: any): AxiosPromise<PageJobResource>;
    /**
     *
     * @summary Updates a Job detail. Returns the updated Job detail.
     * @param {JobResource} jobResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateJob(jobResource: JobResource, options?: any): AxiosPromise<JobResource>;
};
/**
 * JobApi - object-oriented interface
 * @export
 * @class JobApi
 * @extends {BaseAPI}
 */
export declare class JobApi extends BaseAPI {
    /**
     *
     * @summary Cancels a Job.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApi
     */
    cancel(id: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary Returns a Job detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApi
     */
    get12(id: number, options?: any): Promise<import("axios").AxiosResponse<JobResource>>;
    /**
     *
     * @summary Returns the next queued Job of an Agent.
     * @param {string} uuid
     * @param {number} teamId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApi
     */
    getJob(uuid: string, teamId: number, options?: any): Promise<import("axios").AxiosResponse<JobResource>>;
    /**
     *
     * @param {number} id
     * @param {Pageable} pageable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApi
     */
    getLatestJobs(id: number, pageable: Pageable, options?: any): Promise<import("axios").AxiosResponse<PageJobResource>>;
    /**
     *
     * @summary Returns a Job\'s log.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApi
     */
    getLog(id: string, options?: any): Promise<import("axios").AxiosResponse<BuildLog[]>>;
    /**
     *
     * @param {number} id
     * @param {Pageable} pageable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApi
     */
    getRunningJobs(id: number, pageable: Pageable, options?: any): Promise<import("axios").AxiosResponse<PageJobResource>>;
    /**
     *
     * @summary Updates a Job detail. Returns the updated Job detail.
     * @param {JobResource} jobResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApi
     */
    updateJob(jobResource: JobResource, options?: any): Promise<import("axios").AxiosResponse<JobResource>>;
}
/**
 * KatalonRecorderApi - axios parameter creator
 * @export
 */
export declare const KatalonRecorderApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Saves a Katalon Recorder backup detail.
     * @param {string} uploadedPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    backup: (uploadedPath: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Downloads a Katalon Recorder backup. Returns the backup file.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    download3: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Uploads and processes a Katalon Recorder report.
     * @param {string} projectId
     * @param {string} batch
     * @param {string} isEnd
     * @param {string} fileName
     * @param {string} uploadedPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    upload: (projectId: string, batch: string, isEnd: string, fileName: string, uploadedPath: string, options?: any) => Promise<RequestArgs>;
};
/**
 * KatalonRecorderApi - functional programming interface
 * @export
 */
export declare const KatalonRecorderApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Saves a Katalon Recorder backup detail.
     * @param {string} uploadedPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    backup(uploadedPath: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Downloads a Katalon Recorder backup. Returns the backup file.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    download3(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Uploads and processes a Katalon Recorder report.
     * @param {string} projectId
     * @param {string} batch
     * @param {string} isEnd
     * @param {string} fileName
     * @param {string} uploadedPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    upload(projectId: string, batch: string, isEnd: string, fileName: string, uploadedPath: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * KatalonRecorderApi - factory interface
 * @export
 */
export declare const KatalonRecorderApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Saves a Katalon Recorder backup detail.
     * @param {string} uploadedPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    backup(uploadedPath: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Downloads a Katalon Recorder backup. Returns the backup file.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    download3(id: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Uploads and processes a Katalon Recorder report.
     * @param {string} projectId
     * @param {string} batch
     * @param {string} isEnd
     * @param {string} fileName
     * @param {string} uploadedPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    upload(projectId: string, batch: string, isEnd: string, fileName: string, uploadedPath: string, options?: any): AxiosPromise<void>;
};
/**
 * KatalonRecorderApi - object-oriented interface
 * @export
 * @class KatalonRecorderApi
 * @extends {BaseAPI}
 */
export declare class KatalonRecorderApi extends BaseAPI {
    /**
     *
     * @summary Saves a Katalon Recorder backup detail.
     * @param {string} uploadedPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KatalonRecorderApi
     */
    backup(uploadedPath: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary Downloads a Katalon Recorder backup. Returns the backup file.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KatalonRecorderApi
     */
    download3(id: number, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary Uploads and processes a Katalon Recorder report.
     * @param {string} projectId
     * @param {string} batch
     * @param {string} isEnd
     * @param {string} fileName
     * @param {string} uploadedPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KatalonRecorderApi
     */
    upload(projectId: string, batch: string, isEnd: string, fileName: string, uploadedPath: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
}
/**
 * OrganizationTrialRequestResourceControllerApi - axios parameter creator
 * @export
 */
export declare const OrganizationTrialRequestResourceControllerApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get organization trial request data
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTrialRequest: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Submit organization trial request
     * @param {number} id
     * @param {OrganizationTrialRequestResource} organizationTrialRequestResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitTrialRequest: (id: number, organizationTrialRequestResource: OrganizationTrialRequestResource, options?: any) => Promise<RequestArgs>;
};
/**
 * OrganizationTrialRequestResourceControllerApi - functional programming interface
 * @export
 */
export declare const OrganizationTrialRequestResourceControllerApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get organization trial request data
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTrialRequest(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationTrialRequestResource>>;
    /**
     *
     * @summary Submit organization trial request
     * @param {number} id
     * @param {OrganizationTrialRequestResource} organizationTrialRequestResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitTrialRequest(id: number, organizationTrialRequestResource: OrganizationTrialRequestResource, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationTrialRequestResource>>;
};
/**
 * OrganizationTrialRequestResourceControllerApi - factory interface
 * @export
 */
export declare const OrganizationTrialRequestResourceControllerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get organization trial request data
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTrialRequest(id: number, options?: any): AxiosPromise<OrganizationTrialRequestResource>;
    /**
     *
     * @summary Submit organization trial request
     * @param {number} id
     * @param {OrganizationTrialRequestResource} organizationTrialRequestResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    submitTrialRequest(id: number, organizationTrialRequestResource: OrganizationTrialRequestResource, options?: any): AxiosPromise<OrganizationTrialRequestResource>;
};
/**
 * OrganizationTrialRequestResourceControllerApi - object-oriented interface
 * @export
 * @class OrganizationTrialRequestResourceControllerApi
 * @extends {BaseAPI}
 */
export declare class OrganizationTrialRequestResourceControllerApi extends BaseAPI {
    /**
     *
     * @summary Get organization trial request data
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationTrialRequestResourceControllerApi
     */
    getTrialRequest(id: number, options?: any): Promise<import("axios").AxiosResponse<OrganizationTrialRequestResource>>;
    /**
     *
     * @summary Submit organization trial request
     * @param {number} id
     * @param {OrganizationTrialRequestResource} organizationTrialRequestResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationTrialRequestResourceControllerApi
     */
    submitTrialRequest(id: number, organizationTrialRequestResource: OrganizationTrialRequestResource, options?: any): Promise<import("axios").AxiosResponse<OrganizationTrialRequestResource>>;
}
/**
 * ProjectApi - axios parameter creator
 * @export
 */
export declare const ProjectApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Creates a new Project. Returns the created Project detail.
     * @param {ProjectResource} projectResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create2: (projectResource: ProjectResource, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {ProjectSettingResource} projectSettingResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrUpdate: (projectSettingResource: ProjectSettingResource, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Create sample data for project.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSampleData: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes a Project. Returns the deleted Project detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delete2: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns a Project detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get5: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get6: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns all Projects of a Team.
     * @param {Pageable} pageable
     * @param {number} [teamId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list1: (pageable: Pageable, teamId?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates a Project detail. Returns the updated Project detail.
     * @param {ProjectResource} projectResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update2: (projectResource: ProjectResource, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates a Project status. Returns the updated Project detail.
     * @param {ProjectResource} projectResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateStatus: (projectResource: ProjectResource, options?: any) => Promise<RequestArgs>;
};
/**
 * ProjectApi - functional programming interface
 * @export
 */
export declare const ProjectApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Creates a new Project. Returns the created Project detail.
     * @param {ProjectResource} projectResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create2(projectResource: ProjectResource, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectResource>>;
    /**
     *
     * @param {ProjectSettingResource} projectSettingResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrUpdate(projectSettingResource: ProjectSettingResource, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectSettingResource>>;
    /**
     *
     * @summary Create sample data for project.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSampleData(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Deletes a Project. Returns the deleted Project detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delete2(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectResource>>;
    /**
     *
     * @summary Returns a Project detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get5(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectResource>>;
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get6(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectSettingResource>>;
    /**
     *
     * @summary Returns all Projects of a Team.
     * @param {Pageable} pageable
     * @param {number} [teamId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list1(pageable: Pageable, teamId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageProjectResource>>;
    /**
     *
     * @summary Updates a Project detail. Returns the updated Project detail.
     * @param {ProjectResource} projectResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update2(projectResource: ProjectResource, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectResource>>;
    /**
     *
     * @summary Updates a Project status. Returns the updated Project detail.
     * @param {ProjectResource} projectResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateStatus(projectResource: ProjectResource, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectResource>>;
};
/**
 * ProjectApi - factory interface
 * @export
 */
export declare const ProjectApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Creates a new Project. Returns the created Project detail.
     * @param {ProjectResource} projectResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create2(projectResource: ProjectResource, options?: any): AxiosPromise<ProjectResource>;
    /**
     *
     * @param {ProjectSettingResource} projectSettingResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrUpdate(projectSettingResource: ProjectSettingResource, options?: any): AxiosPromise<ProjectSettingResource>;
    /**
     *
     * @summary Create sample data for project.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSampleData(id: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Deletes a Project. Returns the deleted Project detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delete2(id: number, options?: any): AxiosPromise<ProjectResource>;
    /**
     *
     * @summary Returns a Project detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get5(id: number, options?: any): AxiosPromise<ProjectResource>;
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get6(id: number, options?: any): AxiosPromise<ProjectSettingResource>;
    /**
     *
     * @summary Returns all Projects of a Team.
     * @param {Pageable} pageable
     * @param {number} [teamId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list1(pageable: Pageable, teamId?: number, options?: any): AxiosPromise<PageProjectResource>;
    /**
     *
     * @summary Updates a Project detail. Returns the updated Project detail.
     * @param {ProjectResource} projectResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update2(projectResource: ProjectResource, options?: any): AxiosPromise<ProjectResource>;
    /**
     *
     * @summary Updates a Project status. Returns the updated Project detail.
     * @param {ProjectResource} projectResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateStatus(projectResource: ProjectResource, options?: any): AxiosPromise<ProjectResource>;
};
/**
 * ProjectApi - object-oriented interface
 * @export
 * @class ProjectApi
 * @extends {BaseAPI}
 */
export declare class ProjectApi extends BaseAPI {
    /**
     *
     * @summary Creates a new Project. Returns the created Project detail.
     * @param {ProjectResource} projectResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    create2(projectResource: ProjectResource, options?: any): Promise<import("axios").AxiosResponse<ProjectResource>>;
    /**
     *
     * @param {ProjectSettingResource} projectSettingResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    createOrUpdate(projectSettingResource: ProjectSettingResource, options?: any): Promise<import("axios").AxiosResponse<ProjectSettingResource>>;
    /**
     *
     * @summary Create sample data for project.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    createSampleData(id: number, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary Deletes a Project. Returns the deleted Project detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    delete2(id: number, options?: any): Promise<import("axios").AxiosResponse<ProjectResource>>;
    /**
     *
     * @summary Returns a Project detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    get5(id: number, options?: any): Promise<import("axios").AxiosResponse<ProjectResource>>;
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    get6(id: number, options?: any): Promise<import("axios").AxiosResponse<ProjectSettingResource>>;
    /**
     *
     * @summary Returns all Projects of a Team.
     * @param {Pageable} pageable
     * @param {number} [teamId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    list1(pageable: Pageable, teamId?: number, options?: any): Promise<import("axios").AxiosResponse<PageProjectResource>>;
    /**
     *
     * @summary Updates a Project detail. Returns the updated Project detail.
     * @param {ProjectResource} projectResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    update2(projectResource: ProjectResource, options?: any): Promise<import("axios").AxiosResponse<ProjectResource>>;
    /**
     *
     * @summary Updates a Project status. Returns the updated Project detail.
     * @param {ProjectResource} projectResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    updateStatus(projectResource: ProjectResource, options?: any): Promise<import("axios").AxiosResponse<ProjectResource>>;
}
/**
 * ProjectConfigurationResourceControllerApi - axios parameter creator
 * @export
 */
export declare const ProjectConfigurationResourceControllerApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {number} id
     * @param {'TIMEZONE' | 'ASSERTION_PATTERN'} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get14: (id: number, name: 'TIMEZONE' | 'ASSERTION_PATTERN', options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTimeZones: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id
     * @param {ProjectConfigurationResource} projectConfigurationResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update8: (id: number, projectConfigurationResource: ProjectConfigurationResource, options?: any) => Promise<RequestArgs>;
};
/**
 * ProjectConfigurationResourceControllerApi - functional programming interface
 * @export
 */
export declare const ProjectConfigurationResourceControllerApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {number} id
     * @param {'TIMEZONE' | 'ASSERTION_PATTERN'} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get14(id: number, name: 'TIMEZONE' | 'ASSERTION_PATTERN', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectConfigurationResource>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTimeZones(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TimeZoneResource>>>;
    /**
     *
     * @param {number} id
     * @param {ProjectConfigurationResource} projectConfigurationResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update8(id: number, projectConfigurationResource: ProjectConfigurationResource, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectConfigurationResource>>;
};
/**
 * ProjectConfigurationResourceControllerApi - factory interface
 * @export
 */
export declare const ProjectConfigurationResourceControllerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {number} id
     * @param {'TIMEZONE' | 'ASSERTION_PATTERN'} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get14(id: number, name: 'TIMEZONE' | 'ASSERTION_PATTERN', options?: any): AxiosPromise<ProjectConfigurationResource>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTimeZones(options?: any): AxiosPromise<Array<TimeZoneResource>>;
    /**
     *
     * @param {number} id
     * @param {ProjectConfigurationResource} projectConfigurationResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update8(id: number, projectConfigurationResource: ProjectConfigurationResource, options?: any): AxiosPromise<ProjectConfigurationResource>;
};
/**
 * ProjectConfigurationResourceControllerApi - object-oriented interface
 * @export
 * @class ProjectConfigurationResourceControllerApi
 * @extends {BaseAPI}
 */
export declare class ProjectConfigurationResourceControllerApi extends BaseAPI {
    /**
     *
     * @param {number} id
     * @param {'TIMEZONE' | 'ASSERTION_PATTERN'} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectConfigurationResourceControllerApi
     */
    get14(id: number, name: 'TIMEZONE' | 'ASSERTION_PATTERN', options?: any): Promise<import("axios").AxiosResponse<ProjectConfigurationResource>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectConfigurationResourceControllerApi
     */
    listTimeZones(options?: any): Promise<import("axios").AxiosResponse<TimeZoneResource[]>>;
    /**
     *
     * @param {number} id
     * @param {ProjectConfigurationResource} projectConfigurationResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectConfigurationResourceControllerApi
     */
    update8(id: number, projectConfigurationResource: ProjectConfigurationResource, options?: any): Promise<import("axios").AxiosResponse<ProjectConfigurationResource>>;
}
/**
 * ReleaseApi - axios parameter creator
 * @export
 */
export declare const ReleaseApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Open or close a Release. Returns the updated Release detail.
     * @param {number} id
     * @param {boolean} closed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activeRelease: (id: number, closed: boolean, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates or updates a Release. Returns the Release details.
     * @param {ReleaseResource} releaseResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrUpdate1: (releaseResource: ReleaseResource, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes a Release. Returns the Release details.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delete3: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates a Release. Returns the Release details.
     * @param {ReleaseResource} releaseResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update3: (releaseResource: ReleaseResource, options?: any) => Promise<RequestArgs>;
};
/**
 * ReleaseApi - functional programming interface
 * @export
 */
export declare const ReleaseApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Open or close a Release. Returns the updated Release detail.
     * @param {number} id
     * @param {boolean} closed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activeRelease(id: number, closed: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReleaseResource>>;
    /**
     *
     * @summary Creates or updates a Release. Returns the Release details.
     * @param {ReleaseResource} releaseResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrUpdate1(releaseResource: ReleaseResource, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReleaseResource>>;
    /**
     *
     * @summary Deletes a Release. Returns the Release details.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delete3(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReleaseResource>>;
    /**
     *
     * @summary Updates a Release. Returns the Release details.
     * @param {ReleaseResource} releaseResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update3(releaseResource: ReleaseResource, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReleaseResource>>;
};
/**
 * ReleaseApi - factory interface
 * @export
 */
export declare const ReleaseApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Open or close a Release. Returns the updated Release detail.
     * @param {number} id
     * @param {boolean} closed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activeRelease(id: number, closed: boolean, options?: any): AxiosPromise<ReleaseResource>;
    /**
     *
     * @summary Creates or updates a Release. Returns the Release details.
     * @param {ReleaseResource} releaseResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrUpdate1(releaseResource: ReleaseResource, options?: any): AxiosPromise<ReleaseResource>;
    /**
     *
     * @summary Deletes a Release. Returns the Release details.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delete3(id: number, options?: any): AxiosPromise<ReleaseResource>;
    /**
     *
     * @summary Updates a Release. Returns the Release details.
     * @param {ReleaseResource} releaseResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update3(releaseResource: ReleaseResource, options?: any): AxiosPromise<ReleaseResource>;
};
/**
 * ReleaseApi - object-oriented interface
 * @export
 * @class ReleaseApi
 * @extends {BaseAPI}
 */
export declare class ReleaseApi extends BaseAPI {
    /**
     *
     * @summary Open or close a Release. Returns the updated Release detail.
     * @param {number} id
     * @param {boolean} closed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReleaseApi
     */
    activeRelease(id: number, closed: boolean, options?: any): Promise<import("axios").AxiosResponse<ReleaseResource>>;
    /**
     *
     * @summary Creates or updates a Release. Returns the Release details.
     * @param {ReleaseResource} releaseResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReleaseApi
     */
    createOrUpdate1(releaseResource: ReleaseResource, options?: any): Promise<import("axios").AxiosResponse<ReleaseResource>>;
    /**
     *
     * @summary Deletes a Release. Returns the Release details.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReleaseApi
     */
    delete3(id: number, options?: any): Promise<import("axios").AxiosResponse<ReleaseResource>>;
    /**
     *
     * @summary Updates a Release. Returns the Release details.
     * @param {ReleaseResource} releaseResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReleaseApi
     */
    update3(releaseResource: ReleaseResource, options?: any): Promise<import("axios").AxiosResponse<ReleaseResource>>;
}
/**
 * SearchApi - axios parameter creator
 * @export
 */
export declare const SearchApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Queries the resources of a specific type by multiple conditions. Returns the pageable resources satisfying the query.
     * @param {string} q
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    search: (q: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Queries the resources of a specific type by multiple conditions. Returns the pageable resources satisfying the query.
     * @param {SearchRequest} searchRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    search1: (searchRequest: SearchRequest, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns the search configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    test: (options?: any) => Promise<RequestArgs>;
};
/**
 * SearchApi - functional programming interface
 * @export
 */
export declare const SearchApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Queries the resources of a specific type by multiple conditions. Returns the pageable resources satisfying the query.
     * @param {string} q
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    search(q: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageBaseResource>>;
    /**
     *
     * @summary Queries the resources of a specific type by multiple conditions. Returns the pageable resources satisfying the query.
     * @param {SearchRequest} searchRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    search1(searchRequest: SearchRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageBaseResource>>;
    /**
     *
     * @summary Returns the search configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    test(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{
        [key: string]: SearchConfigResource;
    }>>;
};
/**
 * SearchApi - factory interface
 * @export
 */
export declare const SearchApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Queries the resources of a specific type by multiple conditions. Returns the pageable resources satisfying the query.
     * @param {string} q
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    search(q: string, options?: any): AxiosPromise<PageBaseResource>;
    /**
     *
     * @summary Queries the resources of a specific type by multiple conditions. Returns the pageable resources satisfying the query.
     * @param {SearchRequest} searchRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    search1(searchRequest: SearchRequest, options?: any): AxiosPromise<PageBaseResource>;
    /**
     *
     * @summary Returns the search configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    test(options?: any): AxiosPromise<{
        [key: string]: SearchConfigResource;
    }>;
};
/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export declare class SearchApi extends BaseAPI {
    /**
     *
     * @summary Queries the resources of a specific type by multiple conditions. Returns the pageable resources satisfying the query.
     * @param {string} q
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    search(q: string, options?: any): Promise<import("axios").AxiosResponse<PageBaseResource>>;
    /**
     *
     * @summary Queries the resources of a specific type by multiple conditions. Returns the pageable resources satisfying the query.
     * @param {SearchRequest} searchRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    search1(searchRequest: SearchRequest, options?: any): Promise<import("axios").AxiosResponse<PageBaseResource>>;
    /**
     *
     * @summary Returns the search configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    test(options?: any): Promise<import("axios").AxiosResponse<{
        [key: string]: SearchConfigResource;
    }>>;
}
/**
 * TaskApi - axios parameter creator
 * @export
 */
export declare const TaskApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Creates a Task for the test results. Returns the created Task detail.
     * @param {IncidentResource} incidentResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createIncident: (incidentResource: IncidentResource, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns a Task detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get4: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates a Task detail. Returns the updated Task detail.
     * @param {IncidentResource} incidentResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update1: (incidentResource: IncidentResource, options?: any) => Promise<RequestArgs>;
};
/**
 * TaskApi - functional programming interface
 * @export
 */
export declare const TaskApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Creates a Task for the test results. Returns the created Task detail.
     * @param {IncidentResource} incidentResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createIncident(incidentResource: IncidentResource, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IncidentResource>>;
    /**
     *
     * @summary Returns a Task detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get4(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IncidentResource>>;
    /**
     *
     * @summary Updates a Task detail. Returns the updated Task detail.
     * @param {IncidentResource} incidentResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update1(incidentResource: IncidentResource, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IncidentResource>>;
};
/**
 * TaskApi - factory interface
 * @export
 */
export declare const TaskApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Creates a Task for the test results. Returns the created Task detail.
     * @param {IncidentResource} incidentResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createIncident(incidentResource: IncidentResource, options?: any): AxiosPromise<IncidentResource>;
    /**
     *
     * @summary Returns a Task detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get4(id: number, options?: any): AxiosPromise<IncidentResource>;
    /**
     *
     * @summary Updates a Task detail. Returns the updated Task detail.
     * @param {IncidentResource} incidentResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update1(incidentResource: IncidentResource, options?: any): AxiosPromise<IncidentResource>;
};
/**
 * TaskApi - object-oriented interface
 * @export
 * @class TaskApi
 * @extends {BaseAPI}
 */
export declare class TaskApi extends BaseAPI {
    /**
     *
     * @summary Creates a Task for the test results. Returns the created Task detail.
     * @param {IncidentResource} incidentResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    createIncident(incidentResource: IncidentResource, options?: any): Promise<import("axios").AxiosResponse<IncidentResource>>;
    /**
     *
     * @summary Returns a Task detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    get4(id: number, options?: any): Promise<import("axios").AxiosResponse<IncidentResource>>;
    /**
     *
     * @summary Updates a Task detail. Returns the updated Task detail.
     * @param {IncidentResource} incidentResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    update1(incidentResource: IncidentResource, options?: any): Promise<import("axios").AxiosResponse<IncidentResource>>;
}
/**
 * TeamApi - axios parameter creator
 * @export
 */
export declare const TeamApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Creates a new Team. Returns the created Team detail.
     * @param {TeamResource} teamResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create3: (teamResource: TeamResource, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a Team. Returns the delete Team detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delete4: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns a Team detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get7: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns all Teams of the current User.
     * @param {Pageable} pageable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list2: (pageable: Pageable, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates a Team detail. Returns the updated Team detail.
     * @param {TeamResource} teamResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update4: (teamResource: TeamResource, options?: any) => Promise<RequestArgs>;
    /**
     * The user issuing this request must be the Admin of the team.
     * @summary Updates the role of a User in a Team. Returns the updated detail.
     * @param {UserTeamResource} userTeamResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserTeam: (userTeamResource: UserTeamResource, options?: any) => Promise<RequestArgs>;
};
/**
 * TeamApi - functional programming interface
 * @export
 */
export declare const TeamApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Creates a new Team. Returns the created Team detail.
     * @param {TeamResource} teamResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create3(teamResource: TeamResource, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamResource>>;
    /**
     *
     * @summary Delete a Team. Returns the delete Team detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delete4(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamResource>>;
    /**
     *
     * @summary Returns a Team detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get7(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamResource>>;
    /**
     *
     * @summary Returns all Teams of the current User.
     * @param {Pageable} pageable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list2(pageable: Pageable, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageTeamResource>>;
    /**
     *
     * @summary Updates a Team detail. Returns the updated Team detail.
     * @param {TeamResource} teamResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update4(teamResource: TeamResource, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamResource>>;
    /**
     * The user issuing this request must be the Admin of the team.
     * @summary Updates the role of a User in a Team. Returns the updated detail.
     * @param {UserTeamResource} userTeamResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserTeam(userTeamResource: UserTeamResource, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTeamResource>>;
};
/**
 * TeamApi - factory interface
 * @export
 */
export declare const TeamApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Creates a new Team. Returns the created Team detail.
     * @param {TeamResource} teamResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create3(teamResource: TeamResource, options?: any): AxiosPromise<TeamResource>;
    /**
     *
     * @summary Delete a Team. Returns the delete Team detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delete4(id: number, options?: any): AxiosPromise<TeamResource>;
    /**
     *
     * @summary Returns a Team detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get7(id: number, options?: any): AxiosPromise<TeamResource>;
    /**
     *
     * @summary Returns all Teams of the current User.
     * @param {Pageable} pageable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    list2(pageable: Pageable, options?: any): AxiosPromise<PageTeamResource>;
    /**
     *
     * @summary Updates a Team detail. Returns the updated Team detail.
     * @param {TeamResource} teamResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update4(teamResource: TeamResource, options?: any): AxiosPromise<TeamResource>;
    /**
     * The user issuing this request must be the Admin of the team.
     * @summary Updates the role of a User in a Team. Returns the updated detail.
     * @param {UserTeamResource} userTeamResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserTeam(userTeamResource: UserTeamResource, options?: any): AxiosPromise<UserTeamResource>;
};
/**
 * TeamApi - object-oriented interface
 * @export
 * @class TeamApi
 * @extends {BaseAPI}
 */
export declare class TeamApi extends BaseAPI {
    /**
     *
     * @summary Creates a new Team. Returns the created Team detail.
     * @param {TeamResource} teamResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    create3(teamResource: TeamResource, options?: any): Promise<import("axios").AxiosResponse<TeamResource>>;
    /**
     *
     * @summary Delete a Team. Returns the delete Team detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    delete4(id: number, options?: any): Promise<import("axios").AxiosResponse<TeamResource>>;
    /**
     *
     * @summary Returns a Team detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    get7(id: number, options?: any): Promise<import("axios").AxiosResponse<TeamResource>>;
    /**
     *
     * @summary Returns all Teams of the current User.
     * @param {Pageable} pageable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    list2(pageable: Pageable, options?: any): Promise<import("axios").AxiosResponse<PageTeamResource>>;
    /**
     *
     * @summary Updates a Team detail. Returns the updated Team detail.
     * @param {TeamResource} teamResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    update4(teamResource: TeamResource, options?: any): Promise<import("axios").AxiosResponse<TeamResource>>;
    /**
     * The user issuing this request must be the Admin of the team.
     * @summary Updates the role of a User in a Team. Returns the updated detail.
     * @param {UserTeamResource} userTeamResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    updateUserTeam(userTeamResource: UserTeamResource, options?: any): Promise<import("axios").AxiosResponse<UserTeamResource>>;
}
/**
 * TestCaseApi - axios parameter creator
 * @export
 */
export declare const TestCaseApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Returns a Test Case detail.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get8: (id: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Update a Test Case.
     * @param {TestCaseResource} testCaseResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update5: (testCaseResource: TestCaseResource, options?: any) => Promise<RequestArgs>;
};
/**
 * TestCaseApi - functional programming interface
 * @export
 */
export declare const TestCaseApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Returns a Test Case detail.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get8(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestCaseResource>>;
    /**
     *
     * @summary Update a Test Case.
     * @param {TestCaseResource} testCaseResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update5(testCaseResource: TestCaseResource, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestCaseResource>>;
};
/**
 * TestCaseApi - factory interface
 * @export
 */
export declare const TestCaseApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Returns a Test Case detail.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get8(id: string, options?: any): AxiosPromise<TestCaseResource>;
    /**
     *
     * @summary Update a Test Case.
     * @param {TestCaseResource} testCaseResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update5(testCaseResource: TestCaseResource, options?: any): AxiosPromise<TestCaseResource>;
};
/**
 * TestCaseApi - object-oriented interface
 * @export
 * @class TestCaseApi
 * @extends {BaseAPI}
 */
export declare class TestCaseApi extends BaseAPI {
    /**
     *
     * @summary Returns a Test Case detail.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestCaseApi
     */
    get8(id: string, options?: any): Promise<import("axios").AxiosResponse<TestCaseResource>>;
    /**
     *
     * @summary Update a Test Case.
     * @param {TestCaseResource} testCaseResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestCaseApi
     */
    update5(testCaseResource: TestCaseResource, options?: any): Promise<import("axios").AxiosResponse<TestCaseResource>>;
}
/**
 * TestObjectApi - axios parameter creator
 * @export
 */
export declare const TestObjectApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Returns a Test Object detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get15: (id: number, options?: any) => Promise<RequestArgs>;
};
/**
 * TestObjectApi - functional programming interface
 * @export
 */
export declare const TestObjectApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Returns a Test Object detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get15(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestObjectEntityResource>>;
};
/**
 * TestObjectApi - factory interface
 * @export
 */
export declare const TestObjectApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Returns a Test Object detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get15(id: number, options?: any): AxiosPromise<TestObjectEntityResource>;
};
/**
 * TestObjectApi - object-oriented interface
 * @export
 * @class TestObjectApi
 * @extends {BaseAPI}
 */
export declare class TestObjectApi extends BaseAPI {
    /**
     *
     * @summary Returns a Test Object detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestObjectApi
     */
    get15(id: number, options?: any): Promise<import("axios").AxiosResponse<TestObjectEntityResource>>;
}
/**
 * TestPlanApi - axios parameter creator
 * @export
 */
export declare const TestPlanApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Creates and triggers a sample Test Plan. Returns the created Test Plan detail.
     * @param {RunConfigurationResource} runConfigurationResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAndTriggerSample: (runConfigurationResource: RunConfigurationResource, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates or updates a Test Plan. Returns the Test Plan detail.
     * @param {RunConfigurationResource} runConfigurationResource
     * @param {boolean} [verifyRunConfiguration]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrUpdateConfiguration: (runConfigurationResource: RunConfigurationResource, verifyRunConfiguration?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes a Test Plan. Returns the deleted Test Plan detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delete5: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Link an Run Configuration to a Release. Returns the updated Run Configuration detail.
     * @param {number} id
     * @param {number} projectId
     * @param {number} releaseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkRelease1: (id: number, projectId: number, releaseId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Unlink an Run Configuration to a Release. Returns the updated Run Configuration detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unlinkRelease1: (id: number, options?: any) => Promise<RequestArgs>;
};
/**
 * TestPlanApi - functional programming interface
 * @export
 */
export declare const TestPlanApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Creates and triggers a sample Test Plan. Returns the created Test Plan detail.
     * @param {RunConfigurationResource} runConfigurationResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAndTriggerSample(runConfigurationResource: RunConfigurationResource, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunConfigurationResource>>;
    /**
     *
     * @summary Creates or updates a Test Plan. Returns the Test Plan detail.
     * @param {RunConfigurationResource} runConfigurationResource
     * @param {boolean} [verifyRunConfiguration]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrUpdateConfiguration(runConfigurationResource: RunConfigurationResource, verifyRunConfiguration?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunConfigurationResource>>;
    /**
     *
     * @summary Deletes a Test Plan. Returns the deleted Test Plan detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delete5(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunConfigurationResource>>;
    /**
     *
     * @summary Link an Run Configuration to a Release. Returns the updated Run Configuration detail.
     * @param {number} id
     * @param {number} projectId
     * @param {number} releaseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkRelease1(id: number, projectId: number, releaseId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunConfigurationResource>>;
    /**
     *
     * @summary Unlink an Run Configuration to a Release. Returns the updated Run Configuration detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unlinkRelease1(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunConfigurationResource>>;
};
/**
 * TestPlanApi - factory interface
 * @export
 */
export declare const TestPlanApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Creates and triggers a sample Test Plan. Returns the created Test Plan detail.
     * @param {RunConfigurationResource} runConfigurationResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAndTriggerSample(runConfigurationResource: RunConfigurationResource, options?: any): AxiosPromise<RunConfigurationResource>;
    /**
     *
     * @summary Creates or updates a Test Plan. Returns the Test Plan detail.
     * @param {RunConfigurationResource} runConfigurationResource
     * @param {boolean} [verifyRunConfiguration]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrUpdateConfiguration(runConfigurationResource: RunConfigurationResource, verifyRunConfiguration?: boolean, options?: any): AxiosPromise<RunConfigurationResource>;
    /**
     *
     * @summary Deletes a Test Plan. Returns the deleted Test Plan detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delete5(id: number, options?: any): AxiosPromise<RunConfigurationResource>;
    /**
     *
     * @summary Link an Run Configuration to a Release. Returns the updated Run Configuration detail.
     * @param {number} id
     * @param {number} projectId
     * @param {number} releaseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkRelease1(id: number, projectId: number, releaseId: number, options?: any): AxiosPromise<RunConfigurationResource>;
    /**
     *
     * @summary Unlink an Run Configuration to a Release. Returns the updated Run Configuration detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unlinkRelease1(id: number, options?: any): AxiosPromise<RunConfigurationResource>;
};
/**
 * TestPlanApi - object-oriented interface
 * @export
 * @class TestPlanApi
 * @extends {BaseAPI}
 */
export declare class TestPlanApi extends BaseAPI {
    /**
     *
     * @summary Creates and triggers a sample Test Plan. Returns the created Test Plan detail.
     * @param {RunConfigurationResource} runConfigurationResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestPlanApi
     */
    createAndTriggerSample(runConfigurationResource: RunConfigurationResource, options?: any): Promise<import("axios").AxiosResponse<RunConfigurationResource>>;
    /**
     *
     * @summary Creates or updates a Test Plan. Returns the Test Plan detail.
     * @param {RunConfigurationResource} runConfigurationResource
     * @param {boolean} [verifyRunConfiguration]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestPlanApi
     */
    createOrUpdateConfiguration(runConfigurationResource: RunConfigurationResource, verifyRunConfiguration?: boolean, options?: any): Promise<import("axios").AxiosResponse<RunConfigurationResource>>;
    /**
     *
     * @summary Deletes a Test Plan. Returns the deleted Test Plan detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestPlanApi
     */
    delete5(id: number, options?: any): Promise<import("axios").AxiosResponse<RunConfigurationResource>>;
    /**
     *
     * @summary Link an Run Configuration to a Release. Returns the updated Run Configuration detail.
     * @param {number} id
     * @param {number} projectId
     * @param {number} releaseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestPlanApi
     */
    linkRelease1(id: number, projectId: number, releaseId: number, options?: any): Promise<import("axios").AxiosResponse<RunConfigurationResource>>;
    /**
     *
     * @summary Unlink an Run Configuration to a Release. Returns the updated Run Configuration detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestPlanApi
     */
    unlinkRelease1(id: number, options?: any): Promise<import("axios").AxiosResponse<RunConfigurationResource>>;
}
/**
 * TestProjectApi - axios parameter creator
 * @export
 */
export declare const TestProjectApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Creates a new schedule for a Test Plan. Returns the created schedule detail.
     * @param {number} id
     * @param {SchedulerResource} schedulerResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create6: (id: number, schedulerResource: SchedulerResource, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates a Git Test Project. Returns the Git Test Project detail.
     * @param {GitRepositoryResource} gitRepositoryResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGitRepo: (gitRepositoryResource: GitRepositoryResource, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates a new sample Test Project. Returns the created Test Project.
     * @param {string} name
     * @param {'KS' | 'GIT'} type
     * @param {number} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSample: (name: string, type: 'KS' | 'GIT', projectId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes a Test Project. Returns the deleted Test Project.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delete6: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes a schedule. Returns the deleted schedule detail.
     * @param {number} id
     * @param {number} schedulerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delete7: (id: number, schedulerId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Downloads a Test Project package. Returns the latest Test Project package file.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    download4: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns a Test Project detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get17: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns a schedule detail.
     * @param {number} id
     * @param {number} schedulerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScheduler: (id: number, schedulerId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns a Git Test Project detail.
     * @param {number} testProjectGitId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTestProjectGit: (testProjectGitId: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Refresh Test Suite Collection list of Git Test Project
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshTSC: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Executes a Test Plan. Returns the build information.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    run: (id: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates a Test Project detail. Returns the updated Test Project detail.
     * @param {number} id
     * @param {TestProjectResource} testProjectResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update10: (id: number, testProjectResource: TestProjectResource, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates a schedule detail. Returns the updated schedule detail.
     * @param {number} id
     * @param {number} schedulerId
     * @param {SchedulerResource} schedulerResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update9: (id: number, schedulerId: number, schedulerResource: SchedulerResource, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates a Git Test Project detail. Returns the updated Git Test Project detail.
     * @param {GitRepositoryResource} gitRepositoryResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGitRepo: (gitRepositoryResource: GitRepositoryResource, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Update a Test Project package. Returns the updated Test Project detail.
     * @param {number} id
     * @param {string} batch
     * @param {string} folderPath
     * @param {string} fileName
     * @param {string} uploadedPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePackage: (id: number, batch: string, folderPath: string, fileName: string, uploadedPath: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates a new Test Project. Returns the created Test Project.
     * @param {string} name
     * @param {string} projectId
     * @param {string} batch
     * @param {string} folderPath
     * @param {string} fileName
     * @param {string} uploadedPath
     * @param {string} [description]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    upload1: (name: string, projectId: string, batch: string, folderPath: string, fileName: string, uploadedPath: string, description?: string, options?: any) => Promise<RequestArgs>;
};
/**
 * TestProjectApi - functional programming interface
 * @export
 */
export declare const TestProjectApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Creates a new schedule for a Test Plan. Returns the created schedule detail.
     * @param {number} id
     * @param {SchedulerResource} schedulerResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create6(id: number, schedulerResource: SchedulerResource, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchedulerResource>>;
    /**
     *
     * @summary Creates a Git Test Project. Returns the Git Test Project detail.
     * @param {GitRepositoryResource} gitRepositoryResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGitRepo(gitRepositoryResource: GitRepositoryResource, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GitRepositoryResource>>;
    /**
     *
     * @summary Creates a new sample Test Project. Returns the created Test Project.
     * @param {string} name
     * @param {'KS' | 'GIT'} type
     * @param {number} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSample(name: string, type: 'KS' | 'GIT', projectId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestProjectResource>>;
    /**
     *
     * @summary Deletes a Test Project. Returns the deleted Test Project.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delete6(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestProjectResource>>;
    /**
     *
     * @summary Deletes a schedule. Returns the deleted schedule detail.
     * @param {number} id
     * @param {number} schedulerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delete7(id: number, schedulerId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchedulerResource>>;
    /**
     *
     * @summary Downloads a Test Project package. Returns the latest Test Project package file.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    download4(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Returns a Test Project detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get17(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestProjectResource>>;
    /**
     *
     * @summary Returns a schedule detail.
     * @param {number} id
     * @param {number} schedulerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScheduler(id: number, schedulerId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchedulerResource>>;
    /**
     *
     * @summary Returns a Git Test Project detail.
     * @param {number} testProjectGitId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTestProjectGit(testProjectGitId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GitRepositoryResource>>;
    /**
     *
     * @summary Refresh Test Suite Collection list of Git Test Project
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshTSC(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Executes a Test Plan. Returns the build information.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    run(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BuildInfo>>>;
    /**
     *
     * @summary Updates a Test Project detail. Returns the updated Test Project detail.
     * @param {number} id
     * @param {TestProjectResource} testProjectResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update10(id: number, testProjectResource: TestProjectResource, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestProjectResource>>;
    /**
     *
     * @summary Updates a schedule detail. Returns the updated schedule detail.
     * @param {number} id
     * @param {number} schedulerId
     * @param {SchedulerResource} schedulerResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update9(id: number, schedulerId: number, schedulerResource: SchedulerResource, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchedulerResource>>;
    /**
     *
     * @summary Updates a Git Test Project detail. Returns the updated Git Test Project detail.
     * @param {GitRepositoryResource} gitRepositoryResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGitRepo(gitRepositoryResource: GitRepositoryResource, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GitRepositoryResource>>;
    /**
     *
     * @summary Update a Test Project package. Returns the updated Test Project detail.
     * @param {number} id
     * @param {string} batch
     * @param {string} folderPath
     * @param {string} fileName
     * @param {string} uploadedPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePackage(id: number, batch: string, folderPath: string, fileName: string, uploadedPath: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestProjectResource>>;
    /**
     *
     * @summary Creates a new Test Project. Returns the created Test Project.
     * @param {string} name
     * @param {string} projectId
     * @param {string} batch
     * @param {string} folderPath
     * @param {string} fileName
     * @param {string} uploadedPath
     * @param {string} [description]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    upload1(name: string, projectId: string, batch: string, folderPath: string, fileName: string, uploadedPath: string, description?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestProjectResource>>;
};
/**
 * TestProjectApi - factory interface
 * @export
 */
export declare const TestProjectApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Creates a new schedule for a Test Plan. Returns the created schedule detail.
     * @param {number} id
     * @param {SchedulerResource} schedulerResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create6(id: number, schedulerResource: SchedulerResource, options?: any): AxiosPromise<SchedulerResource>;
    /**
     *
     * @summary Creates a Git Test Project. Returns the Git Test Project detail.
     * @param {GitRepositoryResource} gitRepositoryResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGitRepo(gitRepositoryResource: GitRepositoryResource, options?: any): AxiosPromise<GitRepositoryResource>;
    /**
     *
     * @summary Creates a new sample Test Project. Returns the created Test Project.
     * @param {string} name
     * @param {'KS' | 'GIT'} type
     * @param {number} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSample(name: string, type: 'KS' | 'GIT', projectId: number, options?: any): AxiosPromise<TestProjectResource>;
    /**
     *
     * @summary Deletes a Test Project. Returns the deleted Test Project.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delete6(id: number, options?: any): AxiosPromise<TestProjectResource>;
    /**
     *
     * @summary Deletes a schedule. Returns the deleted schedule detail.
     * @param {number} id
     * @param {number} schedulerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    delete7(id: number, schedulerId: number, options?: any): AxiosPromise<SchedulerResource>;
    /**
     *
     * @summary Downloads a Test Project package. Returns the latest Test Project package file.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    download4(id: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Returns a Test Project detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get17(id: number, options?: any): AxiosPromise<TestProjectResource>;
    /**
     *
     * @summary Returns a schedule detail.
     * @param {number} id
     * @param {number} schedulerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScheduler(id: number, schedulerId: number, options?: any): AxiosPromise<SchedulerResource>;
    /**
     *
     * @summary Returns a Git Test Project detail.
     * @param {number} testProjectGitId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTestProjectGit(testProjectGitId: number, options?: any): AxiosPromise<GitRepositoryResource>;
    /**
     *
     * @summary Refresh Test Suite Collection list of Git Test Project
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshTSC(id: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Executes a Test Plan. Returns the build information.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    run(id: number, options?: any): AxiosPromise<Array<BuildInfo>>;
    /**
     *
     * @summary Updates a Test Project detail. Returns the updated Test Project detail.
     * @param {number} id
     * @param {TestProjectResource} testProjectResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update10(id: number, testProjectResource: TestProjectResource, options?: any): AxiosPromise<TestProjectResource>;
    /**
     *
     * @summary Updates a schedule detail. Returns the updated schedule detail.
     * @param {number} id
     * @param {number} schedulerId
     * @param {SchedulerResource} schedulerResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update9(id: number, schedulerId: number, schedulerResource: SchedulerResource, options?: any): AxiosPromise<SchedulerResource>;
    /**
     *
     * @summary Updates a Git Test Project detail. Returns the updated Git Test Project detail.
     * @param {GitRepositoryResource} gitRepositoryResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGitRepo(gitRepositoryResource: GitRepositoryResource, options?: any): AxiosPromise<GitRepositoryResource>;
    /**
     *
     * @summary Update a Test Project package. Returns the updated Test Project detail.
     * @param {number} id
     * @param {string} batch
     * @param {string} folderPath
     * @param {string} fileName
     * @param {string} uploadedPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePackage(id: number, batch: string, folderPath: string, fileName: string, uploadedPath: string, options?: any): AxiosPromise<TestProjectResource>;
    /**
     *
     * @summary Creates a new Test Project. Returns the created Test Project.
     * @param {string} name
     * @param {string} projectId
     * @param {string} batch
     * @param {string} folderPath
     * @param {string} fileName
     * @param {string} uploadedPath
     * @param {string} [description]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    upload1(name: string, projectId: string, batch: string, folderPath: string, fileName: string, uploadedPath: string, description?: string, options?: any): AxiosPromise<TestProjectResource>;
};
/**
 * TestProjectApi - object-oriented interface
 * @export
 * @class TestProjectApi
 * @extends {BaseAPI}
 */
export declare class TestProjectApi extends BaseAPI {
    /**
     *
     * @summary Creates a new schedule for a Test Plan. Returns the created schedule detail.
     * @param {number} id
     * @param {SchedulerResource} schedulerResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestProjectApi
     */
    create6(id: number, schedulerResource: SchedulerResource, options?: any): Promise<import("axios").AxiosResponse<SchedulerResource>>;
    /**
     *
     * @summary Creates a Git Test Project. Returns the Git Test Project detail.
     * @param {GitRepositoryResource} gitRepositoryResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestProjectApi
     */
    createGitRepo(gitRepositoryResource: GitRepositoryResource, options?: any): Promise<import("axios").AxiosResponse<GitRepositoryResource>>;
    /**
     *
     * @summary Creates a new sample Test Project. Returns the created Test Project.
     * @param {string} name
     * @param {'KS' | 'GIT'} type
     * @param {number} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestProjectApi
     */
    createSample(name: string, type: 'KS' | 'GIT', projectId: number, options?: any): Promise<import("axios").AxiosResponse<TestProjectResource>>;
    /**
     *
     * @summary Deletes a Test Project. Returns the deleted Test Project.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestProjectApi
     */
    delete6(id: number, options?: any): Promise<import("axios").AxiosResponse<TestProjectResource>>;
    /**
     *
     * @summary Deletes a schedule. Returns the deleted schedule detail.
     * @param {number} id
     * @param {number} schedulerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestProjectApi
     */
    delete7(id: number, schedulerId: number, options?: any): Promise<import("axios").AxiosResponse<SchedulerResource>>;
    /**
     *
     * @summary Downloads a Test Project package. Returns the latest Test Project package file.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestProjectApi
     */
    download4(id: number, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary Returns a Test Project detail.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestProjectApi
     */
    get17(id: number, options?: any): Promise<import("axios").AxiosResponse<TestProjectResource>>;
    /**
     *
     * @summary Returns a schedule detail.
     * @param {number} id
     * @param {number} schedulerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestProjectApi
     */
    getScheduler(id: number, schedulerId: number, options?: any): Promise<import("axios").AxiosResponse<SchedulerResource>>;
    /**
     *
     * @summary Returns a Git Test Project detail.
     * @param {number} testProjectGitId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestProjectApi
     */
    getTestProjectGit(testProjectGitId: number, options?: any): Promise<import("axios").AxiosResponse<GitRepositoryResource>>;
    /**
     *
     * @summary Refresh Test Suite Collection list of Git Test Project
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestProjectApi
     */
    refreshTSC(id: number, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary Executes a Test Plan. Returns the build information.
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestProjectApi
     */
    run(id: number, options?: any): Promise<import("axios").AxiosResponse<BuildInfo[]>>;
    /**
     *
     * @summary Updates a Test Project detail. Returns the updated Test Project detail.
     * @param {number} id
     * @param {TestProjectResource} testProjectResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestProjectApi
     */
    update10(id: number, testProjectResource: TestProjectResource, options?: any): Promise<import("axios").AxiosResponse<TestProjectResource>>;
    /**
     *
     * @summary Updates a schedule detail. Returns the updated schedule detail.
     * @param {number} id
     * @param {number} schedulerId
     * @param {SchedulerResource} schedulerResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestProjectApi
     */
    update9(id: number, schedulerId: number, schedulerResource: SchedulerResource, options?: any): Promise<import("axios").AxiosResponse<SchedulerResource>>;
    /**
     *
     * @summary Updates a Git Test Project detail. Returns the updated Git Test Project detail.
     * @param {GitRepositoryResource} gitRepositoryResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestProjectApi
     */
    updateGitRepo(gitRepositoryResource: GitRepositoryResource, options?: any): Promise<import("axios").AxiosResponse<GitRepositoryResource>>;
    /**
     *
     * @summary Update a Test Project package. Returns the updated Test Project detail.
     * @param {number} id
     * @param {string} batch
     * @param {string} folderPath
     * @param {string} fileName
     * @param {string} uploadedPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestProjectApi
     */
    updatePackage(id: number, batch: string, folderPath: string, fileName: string, uploadedPath: string, options?: any): Promise<import("axios").AxiosResponse<TestProjectResource>>;
    /**
     *
     * @summary Creates a new Test Project. Returns the created Test Project.
     * @param {string} name
     * @param {string} projectId
     * @param {string} batch
     * @param {string} folderPath
     * @param {string} fileName
     * @param {string} uploadedPath
     * @param {string} [description]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestProjectApi
     */
    upload1(name: string, projectId: string, batch: string, folderPath: string, fileName: string, uploadedPath: string, description?: string, options?: any): Promise<import("axios").AxiosResponse<TestProjectResource>>;
}
/**
 * TestReportApi - axios parameter creator
 * @export
 */
export declare const TestReportApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Saves and processes multiple uploaded Katalon reports.
     * @param {number} projectId
     * @param {string} batch
     * @param {Array<UploadBatchFileResource>} uploadBatchFileResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processMultipleS3File: (projectId: number, batch: string, uploadBatchFileResource: Array<UploadBatchFileResource>, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Saves and processes the uploaded Katalon reports.
     * @param {string} projectId
     * @param {string} batch
     * @param {string} folderPath
     * @param {string} isEnd
     * @param {string} fileName
     * @param {string} uploadedPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processS3File: (projectId: string, batch: string, folderPath: string, isEnd: string, fileName: string, uploadedPath: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Saves and processes multiple uploaded TestOps reports.
     * @param {number} projectId
     * @param {string} batch
     * @param {Array<UploadBatchFileResource>} uploadBatchFileResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processTestOpsReports: (projectId: number, batch: string, uploadBatchFileResource: Array<UploadBatchFileResource>, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {number} projectId
     * @param {TestRunResult} testRunResult
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResult: (projectId: number, testRunResult: TestRunResult, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Uploads and processes the JUnit reports to an Execution.
     * @param {string} projectId
     * @param {string} batch
     * @param {string} folderPath
     * @param {string} isEnd
     * @param {string} fileName
     * @param {string} uploadedPath
     * @param {string} [sessionId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadJUnitReports: (projectId: string, batch: string, folderPath: string, isEnd: string, fileName: string, uploadedPath: string, sessionId?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Uploads and processes the TestNG reports to an execution.
     * @param {number} executionId
     * @param {number} projectId
     * @param {string} batch
     * @param {string} folderPath
     * @param {boolean} isEnd
     * @param {string} fileName
     * @param {string} uploadedPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadTestNGReports: (executionId: number, projectId: number, batch: string, folderPath: string, isEnd: boolean, fileName: string, uploadedPath: string, options?: any) => Promise<RequestArgs>;
};
/**
 * TestReportApi - functional programming interface
 * @export
 */
export declare const TestReportApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Saves and processes multiple uploaded Katalon reports.
     * @param {number} projectId
     * @param {string} batch
     * @param {Array<UploadBatchFileResource>} uploadBatchFileResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processMultipleS3File(projectId: number, batch: string, uploadBatchFileResource: Array<UploadBatchFileResource>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UploadBatchResource>>>;
    /**
     *
     * @summary Saves and processes the uploaded Katalon reports.
     * @param {string} projectId
     * @param {string} batch
     * @param {string} folderPath
     * @param {string} isEnd
     * @param {string} fileName
     * @param {string} uploadedPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processS3File(projectId: string, batch: string, folderPath: string, isEnd: string, fileName: string, uploadedPath: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UploadBatchResource>>>;
    /**
     *
     * @summary Saves and processes multiple uploaded TestOps reports.
     * @param {number} projectId
     * @param {string} batch
     * @param {Array<UploadBatchFileResource>} uploadBatchFileResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processTestOpsReports(projectId: number, batch: string, uploadBatchFileResource: Array<UploadBatchFileResource>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadBatchResource>>;
    /**
     *
     * @param {number} projectId
     * @param {TestRunResult} testRunResult
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResult(projectId: number, testRunResult: TestRunResult, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExecutionResource>>;
    /**
     *
     * @summary Uploads and processes the JUnit reports to an Execution.
     * @param {string} projectId
     * @param {string} batch
     * @param {string} folderPath
     * @param {string} isEnd
     * @param {string} fileName
     * @param {string} uploadedPath
     * @param {string} [sessionId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadJUnitReports(projectId: string, batch: string, folderPath: string, isEnd: string, fileName: string, uploadedPath: string, sessionId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Uploads and processes the TestNG reports to an execution.
     * @param {number} executionId
     * @param {number} projectId
     * @param {string} batch
     * @param {string} folderPath
     * @param {boolean} isEnd
     * @param {string} fileName
     * @param {string} uploadedPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadTestNGReports(executionId: number, projectId: number, batch: string, folderPath: string, isEnd: boolean, fileName: string, uploadedPath: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * TestReportApi - factory interface
 * @export
 */
export declare const TestReportApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Saves and processes multiple uploaded Katalon reports.
     * @param {number} projectId
     * @param {string} batch
     * @param {Array<UploadBatchFileResource>} uploadBatchFileResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processMultipleS3File(projectId: number, batch: string, uploadBatchFileResource: Array<UploadBatchFileResource>, options?: any): AxiosPromise<Array<UploadBatchResource>>;
    /**
     *
     * @summary Saves and processes the uploaded Katalon reports.
     * @param {string} projectId
     * @param {string} batch
     * @param {string} folderPath
     * @param {string} isEnd
     * @param {string} fileName
     * @param {string} uploadedPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processS3File(projectId: string, batch: string, folderPath: string, isEnd: string, fileName: string, uploadedPath: string, options?: any): AxiosPromise<Array<UploadBatchResource>>;
    /**
     *
     * @summary Saves and processes multiple uploaded TestOps reports.
     * @param {number} projectId
     * @param {string} batch
     * @param {Array<UploadBatchFileResource>} uploadBatchFileResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processTestOpsReports(projectId: number, batch: string, uploadBatchFileResource: Array<UploadBatchFileResource>, options?: any): AxiosPromise<UploadBatchResource>;
    /**
     *
     * @param {number} projectId
     * @param {TestRunResult} testRunResult
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResult(projectId: number, testRunResult: TestRunResult, options?: any): AxiosPromise<ExecutionResource>;
    /**
     *
     * @summary Uploads and processes the JUnit reports to an Execution.
     * @param {string} projectId
     * @param {string} batch
     * @param {string} folderPath
     * @param {string} isEnd
     * @param {string} fileName
     * @param {string} uploadedPath
     * @param {string} [sessionId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadJUnitReports(projectId: string, batch: string, folderPath: string, isEnd: string, fileName: string, uploadedPath: string, sessionId?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Uploads and processes the TestNG reports to an execution.
     * @param {number} executionId
     * @param {number} projectId
     * @param {string} batch
     * @param {string} folderPath
     * @param {boolean} isEnd
     * @param {string} fileName
     * @param {string} uploadedPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadTestNGReports(executionId: number, projectId: number, batch: string, folderPath: string, isEnd: boolean, fileName: string, uploadedPath: string, options?: any): AxiosPromise<void>;
};
/**
 * TestReportApi - object-oriented interface
 * @export
 * @class TestReportApi
 * @extends {BaseAPI}
 */
export declare class TestReportApi extends BaseAPI {
    /**
     *
     * @summary Saves and processes multiple uploaded Katalon reports.
     * @param {number} projectId
     * @param {string} batch
     * @param {Array<UploadBatchFileResource>} uploadBatchFileResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestReportApi
     */
    processMultipleS3File(projectId: number, batch: string, uploadBatchFileResource: Array<UploadBatchFileResource>, options?: any): Promise<import("axios").AxiosResponse<UploadBatchResource[]>>;
    /**
     *
     * @summary Saves and processes the uploaded Katalon reports.
     * @param {string} projectId
     * @param {string} batch
     * @param {string} folderPath
     * @param {string} isEnd
     * @param {string} fileName
     * @param {string} uploadedPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestReportApi
     */
    processS3File(projectId: string, batch: string, folderPath: string, isEnd: string, fileName: string, uploadedPath: string, options?: any): Promise<import("axios").AxiosResponse<UploadBatchResource[]>>;
    /**
     *
     * @summary Saves and processes multiple uploaded TestOps reports.
     * @param {number} projectId
     * @param {string} batch
     * @param {Array<UploadBatchFileResource>} uploadBatchFileResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestReportApi
     */
    processTestOpsReports(projectId: number, batch: string, uploadBatchFileResource: Array<UploadBatchFileResource>, options?: any): Promise<import("axios").AxiosResponse<UploadBatchResource>>;
    /**
     *
     * @param {number} projectId
     * @param {TestRunResult} testRunResult
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestReportApi
     */
    updateResult(projectId: number, testRunResult: TestRunResult, options?: any): Promise<import("axios").AxiosResponse<ExecutionResource>>;
    /**
     *
     * @summary Uploads and processes the JUnit reports to an Execution.
     * @param {string} projectId
     * @param {string} batch
     * @param {string} folderPath
     * @param {string} isEnd
     * @param {string} fileName
     * @param {string} uploadedPath
     * @param {string} [sessionId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestReportApi
     */
    uploadJUnitReports(projectId: string, batch: string, folderPath: string, isEnd: string, fileName: string, uploadedPath: string, sessionId?: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary Uploads and processes the TestNG reports to an execution.
     * @param {number} executionId
     * @param {number} projectId
     * @param {string} batch
     * @param {string} folderPath
     * @param {boolean} isEnd
     * @param {string} fileName
     * @param {string} uploadedPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestReportApi
     */
    uploadTestNGReports(executionId: number, projectId: number, batch: string, folderPath: string, isEnd: boolean, fileName: string, uploadedPath: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
}
/**
 * TestSuiteApi - axios parameter creator
 * @export
 */
export declare const TestSuiteApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Returns a Test Suite detail.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get9: (id: string, options?: any) => Promise<RequestArgs>;
};
/**
 * TestSuiteApi - functional programming interface
 * @export
 */
export declare const TestSuiteApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Returns a Test Suite detail.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get9(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestSuiteResource>>;
};
/**
 * TestSuiteApi - factory interface
 * @export
 */
export declare const TestSuiteApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Returns a Test Suite detail.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get9(id: string, options?: any): AxiosPromise<TestSuiteResource>;
};
/**
 * TestSuiteApi - object-oriented interface
 * @export
 * @class TestSuiteApi
 * @extends {BaseAPI}
 */
export declare class TestSuiteApi extends BaseAPI {
    /**
     *
     * @summary Returns a Test Suite detail.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestSuiteApi
     */
    get9(id: string, options?: any): Promise<import("axios").AxiosResponse<TestSuiteResource>>;
}
/**
 * UserApi - axios parameter creator
 * @export
 */
export declare const UserApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * The user issuing this request must be the Admin of the team.
     * @summary Adds users to a Team. Returns the added User detail.
     * @param {number} teamId
     * @param {Array<number>} newUserIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assignUserTeam: (teamId: number, newUserIds: Array<number>, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Change the avatar of the current User. Returns the updated User detail.
     * @param {string} uploadedPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeAvatar: (uploadedPath: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Change name for current user.
     * @param {string} firstName
     * @param {string} lastName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeName: (firstName: string, lastName: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates the User Settings detail. Returns the updated User Settings detail.
     * @param {UserSettingResource} userSettingResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrUpdate2: (userSettingResource: UserSettingResource, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Downloads the avatar of the current User. Returns the current avatar file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    downloadAvatar: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns the User Settings detail.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get10: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns the current User detail.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMe: (options?: any) => Promise<RequestArgs>;
    /**
     * The user issuing this request must be the Admin of the team.
     * @summary Removes a User from a Team. Returns the removed User detail.
     * @param {number} teamId
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUser: (teamId: number, userId: number, options?: any) => Promise<RequestArgs>;
};
/**
 * UserApi - functional programming interface
 * @export
 */
export declare const UserApiFp: (configuration?: Configuration) => {
    /**
     * The user issuing this request must be the Admin of the team.
     * @summary Adds users to a Team. Returns the added User detail.
     * @param {number} teamId
     * @param {Array<number>} newUserIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assignUserTeam(teamId: number, newUserIds: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserResource>>>;
    /**
     *
     * @summary Change the avatar of the current User. Returns the updated User detail.
     * @param {string} uploadedPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeAvatar(uploadedPath: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResource>>;
    /**
     *
     * @summary Change name for current user.
     * @param {string} firstName
     * @param {string} lastName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeName(firstName: string, lastName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResource>>;
    /**
     *
     * @summary Updates the User Settings detail. Returns the updated User Settings detail.
     * @param {UserSettingResource} userSettingResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrUpdate2(userSettingResource: UserSettingResource, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSettingResource>>;
    /**
     *
     * @summary Downloads the avatar of the current User. Returns the current avatar file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    downloadAvatar(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Returns the User Settings detail.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get10(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSettingResource>>;
    /**
     *
     * @summary Returns the current User detail.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMe(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResource>>;
    /**
     * The user issuing this request must be the Admin of the team.
     * @summary Removes a User from a Team. Returns the removed User detail.
     * @param {number} teamId
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUser(teamId: number, userId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResource>>;
};
/**
 * UserApi - factory interface
 * @export
 */
export declare const UserApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * The user issuing this request must be the Admin of the team.
     * @summary Adds users to a Team. Returns the added User detail.
     * @param {number} teamId
     * @param {Array<number>} newUserIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assignUserTeam(teamId: number, newUserIds: Array<number>, options?: any): AxiosPromise<Array<UserResource>>;
    /**
     *
     * @summary Change the avatar of the current User. Returns the updated User detail.
     * @param {string} uploadedPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeAvatar(uploadedPath: string, options?: any): AxiosPromise<UserResource>;
    /**
     *
     * @summary Change name for current user.
     * @param {string} firstName
     * @param {string} lastName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeName(firstName: string, lastName: string, options?: any): AxiosPromise<UserResource>;
    /**
     *
     * @summary Updates the User Settings detail. Returns the updated User Settings detail.
     * @param {UserSettingResource} userSettingResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrUpdate2(userSettingResource: UserSettingResource, options?: any): AxiosPromise<UserSettingResource>;
    /**
     *
     * @summary Downloads the avatar of the current User. Returns the current avatar file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    downloadAvatar(options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Returns the User Settings detail.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get10(options?: any): AxiosPromise<UserSettingResource>;
    /**
     *
     * @summary Returns the current User detail.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMe(options?: any): AxiosPromise<UserResource>;
    /**
     * The user issuing this request must be the Admin of the team.
     * @summary Removes a User from a Team. Returns the removed User detail.
     * @param {number} teamId
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUser(teamId: number, userId: number, options?: any): AxiosPromise<UserResource>;
};
/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export declare class UserApi extends BaseAPI {
    /**
     * The user issuing this request must be the Admin of the team.
     * @summary Adds users to a Team. Returns the added User detail.
     * @param {number} teamId
     * @param {Array<number>} newUserIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    assignUserTeam(teamId: number, newUserIds: Array<number>, options?: any): Promise<import("axios").AxiosResponse<UserResource[]>>;
    /**
     *
     * @summary Change the avatar of the current User. Returns the updated User detail.
     * @param {string} uploadedPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    changeAvatar(uploadedPath: string, options?: any): Promise<import("axios").AxiosResponse<UserResource>>;
    /**
     *
     * @summary Change name for current user.
     * @param {string} firstName
     * @param {string} lastName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    changeName(firstName: string, lastName: string, options?: any): Promise<import("axios").AxiosResponse<UserResource>>;
    /**
     *
     * @summary Updates the User Settings detail. Returns the updated User Settings detail.
     * @param {UserSettingResource} userSettingResource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    createOrUpdate2(userSettingResource: UserSettingResource, options?: any): Promise<import("axios").AxiosResponse<UserSettingResource>>;
    /**
     *
     * @summary Downloads the avatar of the current User. Returns the current avatar file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    downloadAvatar(options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary Returns the User Settings detail.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    get10(options?: any): Promise<import("axios").AxiosResponse<UserSettingResource>>;
    /**
     *
     * @summary Returns the current User detail.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getMe(options?: any): Promise<import("axios").AxiosResponse<UserResource>>;
    /**
     * The user issuing this request must be the Admin of the team.
     * @summary Removes a User from a Team. Returns the removed User detail.
     * @param {number} teamId
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    removeUser(teamId: number, userId: number, options?: any): Promise<import("axios").AxiosResponse<UserResource>>;
}
/**
 * WebServiceApi - axios parameter creator
 * @export
 */
export declare const WebServiceApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Returns a Web Service detail.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get16: (id: string, options?: any) => Promise<RequestArgs>;
};
/**
 * WebServiceApi - functional programming interface
 * @export
 */
export declare const WebServiceApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Returns a Web Service detail.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get16(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestObjectResource>>;
};
/**
 * WebServiceApi - factory interface
 * @export
 */
export declare const WebServiceApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Returns a Web Service detail.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get16(id: string, options?: any): AxiosPromise<TestObjectResource>;
};
/**
 * WebServiceApi - object-oriented interface
 * @export
 * @class WebServiceApi
 * @extends {BaseAPI}
 */
export declare class WebServiceApi extends BaseAPI {
    /**
     *
     * @summary Returns a Web Service detail.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebServiceApi
     */
    get16(id: string, options?: any): Promise<import("axios").AxiosResponse<TestObjectResource>>;
}
